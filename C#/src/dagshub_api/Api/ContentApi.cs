/* 
 * DagsHub API
 *
 * This API provides a way to retrive & interact with data about DagsHub repositories, users, issues, webhooks and more. The API is also used by the [DagsHub Direct Data Access streaming client](https://github.com/DagsHub/client) to stream content from a repository for easier and faster training. 
 *
 * OpenAPI spec version: 1.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using dagshub_api.Client;
using dagshub_api.Model;

namespace dagshub_api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IContentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Download archive
        /// </summary>
        /// <remarks>
        /// This method returns archive by given format.
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="_ref">The name of the commit/branch/tag</param>
        /// <param name="format">The format of archive, either .zip or .tar.gz</param>
        /// <returns></returns>
        void GetArchive (string owner, string repo, string _ref, string format);

        /// <summary>
        /// Download archive
        /// </summary>
        /// <remarks>
        /// This method returns archive by given format.
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="_ref">The name of the commit/branch/tag</param>
        /// <param name="format">The format of archive, either .zip or .tar.gz</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetArchiveWithHttpInfo (string owner, string repo, string _ref, string format);
        /// <summary>
        /// List data in a repository folder
        /// </summary>
        /// <remarks>
        /// List files, commit sha1, and versioning type for a folder in repository.  To get sizes add to the query param &#x60;include_size&#x3D;true&#x60;. May result in a slower response. 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="branch">branch of the repository</param>
        /// <param name="path">path of a folder in the repository</param>
        /// <param name="includeSize"> (optional, default to false)</param>
        /// <returns>Files</returns>
        Files GetContent (string owner, string repo, string branch, string path, bool? includeSize = null);

        /// <summary>
        /// List data in a repository folder
        /// </summary>
        /// <remarks>
        /// List files, commit sha1, and versioning type for a folder in repository.  To get sizes add to the query param &#x60;include_size&#x3D;true&#x60;. May result in a slower response. 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="branch">branch of the repository</param>
        /// <param name="path">path of a folder in the repository</param>
        /// <param name="includeSize"> (optional, default to false)</param>
        /// <returns>ApiResponse of Files</returns>
        ApiResponse<Files> GetContentWithHttpInfo (string owner, string repo, string branch, string path, bool? includeSize = null);
        /// <summary>
        /// Download raw content
        /// </summary>
        /// <remarks>
        /// This method returns the raw content of a file.
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="_ref">The name of the commit/branch/tag</param>
        /// <param name="path">The content path</param>
        /// <returns></returns>
        void GetRaw (string owner, string repo, string _ref, string path);

        /// <summary>
        /// Download raw content
        /// </summary>
        /// <remarks>
        /// This method returns the raw content of a file.
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="_ref">The name of the commit/branch/tag</param>
        /// <param name="path">The content path</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetRawWithHttpInfo (string owner, string repo, string _ref, string path);
        /// <summary>
        /// Upload data to a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="branch">branch of the repository</param>
        /// <param name="path">path of a folder in the repository</param>
        /// <param name="commitSummary"> (optional)</param>
        /// <param name="commitMessage"> (optional)</param>
        /// <param name="commitChoice"> (optional)</param>
        /// <param name="lastCommit"> (optional)</param>
        /// <param name="newBranchName"> (optional)</param>
        /// <param name="versioning"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns></returns>
        void UploadContent (string owner, string repo, string branch, string path, string commitSummary = null, string commitMessage = null, string commitChoice = null, string lastCommit = null, string newBranchName = null, string versioning = null, string files = null);

        /// <summary>
        /// Upload data to a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="branch">branch of the repository</param>
        /// <param name="path">path of a folder in the repository</param>
        /// <param name="commitSummary"> (optional)</param>
        /// <param name="commitMessage"> (optional)</param>
        /// <param name="commitChoice"> (optional)</param>
        /// <param name="lastCommit"> (optional)</param>
        /// <param name="newBranchName"> (optional)</param>
        /// <param name="versioning"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UploadContentWithHttpInfo (string owner, string repo, string branch, string path, string commitSummary = null, string commitMessage = null, string commitChoice = null, string lastCommit = null, string newBranchName = null, string versioning = null, string files = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Download archive
        /// </summary>
        /// <remarks>
        /// This method returns archive by given format.
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="_ref">The name of the commit/branch/tag</param>
        /// <param name="format">The format of archive, either .zip or .tar.gz</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetArchiveAsync (string owner, string repo, string _ref, string format);

        /// <summary>
        /// Download archive
        /// </summary>
        /// <remarks>
        /// This method returns archive by given format.
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="_ref">The name of the commit/branch/tag</param>
        /// <param name="format">The format of archive, either .zip or .tar.gz</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetArchiveAsyncWithHttpInfo (string owner, string repo, string _ref, string format);
        /// <summary>
        /// List data in a repository folder
        /// </summary>
        /// <remarks>
        /// List files, commit sha1, and versioning type for a folder in repository.  To get sizes add to the query param &#x60;include_size&#x3D;true&#x60;. May result in a slower response. 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="branch">branch of the repository</param>
        /// <param name="path">path of a folder in the repository</param>
        /// <param name="includeSize"> (optional, default to false)</param>
        /// <returns>Task of Files</returns>
        System.Threading.Tasks.Task<Files> GetContentAsync (string owner, string repo, string branch, string path, bool? includeSize = null);

        /// <summary>
        /// List data in a repository folder
        /// </summary>
        /// <remarks>
        /// List files, commit sha1, and versioning type for a folder in repository.  To get sizes add to the query param &#x60;include_size&#x3D;true&#x60;. May result in a slower response. 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="branch">branch of the repository</param>
        /// <param name="path">path of a folder in the repository</param>
        /// <param name="includeSize"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Files)</returns>
        System.Threading.Tasks.Task<ApiResponse<Files>> GetContentAsyncWithHttpInfo (string owner, string repo, string branch, string path, bool? includeSize = null);
        /// <summary>
        /// Download raw content
        /// </summary>
        /// <remarks>
        /// This method returns the raw content of a file.
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="_ref">The name of the commit/branch/tag</param>
        /// <param name="path">The content path</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetRawAsync (string owner, string repo, string _ref, string path);

        /// <summary>
        /// Download raw content
        /// </summary>
        /// <remarks>
        /// This method returns the raw content of a file.
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="_ref">The name of the commit/branch/tag</param>
        /// <param name="path">The content path</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetRawAsyncWithHttpInfo (string owner, string repo, string _ref, string path);
        /// <summary>
        /// Upload data to a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="branch">branch of the repository</param>
        /// <param name="path">path of a folder in the repository</param>
        /// <param name="commitSummary"> (optional)</param>
        /// <param name="commitMessage"> (optional)</param>
        /// <param name="commitChoice"> (optional)</param>
        /// <param name="lastCommit"> (optional)</param>
        /// <param name="newBranchName"> (optional)</param>
        /// <param name="versioning"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UploadContentAsync (string owner, string repo, string branch, string path, string commitSummary = null, string commitMessage = null, string commitChoice = null, string lastCommit = null, string newBranchName = null, string versioning = null, string files = null);

        /// <summary>
        /// Upload data to a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="branch">branch of the repository</param>
        /// <param name="path">path of a folder in the repository</param>
        /// <param name="commitSummary"> (optional)</param>
        /// <param name="commitMessage"> (optional)</param>
        /// <param name="commitChoice"> (optional)</param>
        /// <param name="lastCommit"> (optional)</param>
        /// <param name="newBranchName"> (optional)</param>
        /// <param name="versioning"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadContentAsyncWithHttpInfo (string owner, string repo, string branch, string path, string commitSummary = null, string commitMessage = null, string commitChoice = null, string lastCommit = null, string newBranchName = null, string versioning = null, string files = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ContentApi : IContentApi
    {
        private dagshub_api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContentApi(String basePath)
        {
            this.Configuration = new dagshub_api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = dagshub_api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentApi"/> class
        /// </summary>
        /// <returns></returns>
        public ContentApi()
        {
            this.Configuration = dagshub_api.Client.Configuration.Default;

            ExceptionFactory = dagshub_api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContentApi(dagshub_api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = dagshub_api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = dagshub_api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public dagshub_api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public dagshub_api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Download archive This method returns archive by given format.
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="_ref">The name of the commit/branch/tag</param>
        /// <param name="format">The format of archive, either .zip or .tar.gz</param>
        /// <returns></returns>
        public void GetArchive (string owner, string repo, string _ref, string format)
        {
             GetArchiveWithHttpInfo(owner, repo, _ref, format);
        }

        /// <summary>
        /// Download archive This method returns archive by given format.
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="_ref">The name of the commit/branch/tag</param>
        /// <param name="format">The format of archive, either .zip or .tar.gz</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetArchiveWithHttpInfo (string owner, string repo, string _ref, string format)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ContentApi->GetArchive");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling ContentApi->GetArchive");
            // verify the required parameter '_ref' is set
            if (_ref == null)
                throw new ApiException(400, "Missing required parameter '_ref' when calling ContentApi->GetArchive");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling ContentApi->GetArchive");

            var localVarPath = "/repos/{owner}/{repo}/archive/{ref}{format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (_ref != null) localVarPathParams.Add("ref", this.Configuration.ApiClient.ParameterToString(_ref)); // path parameter
            if (format != null) localVarPathParams.Add("format", this.Configuration.ApiClient.ParameterToString(format)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Download archive This method returns archive by given format.
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="_ref">The name of the commit/branch/tag</param>
        /// <param name="format">The format of archive, either .zip or .tar.gz</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetArchiveAsync (string owner, string repo, string _ref, string format)
        {
             await GetArchiveAsyncWithHttpInfo(owner, repo, _ref, format);

        }

        /// <summary>
        /// Download archive This method returns archive by given format.
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="_ref">The name of the commit/branch/tag</param>
        /// <param name="format">The format of archive, either .zip or .tar.gz</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetArchiveAsyncWithHttpInfo (string owner, string repo, string _ref, string format)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ContentApi->GetArchive");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling ContentApi->GetArchive");
            // verify the required parameter '_ref' is set
            if (_ref == null)
                throw new ApiException(400, "Missing required parameter '_ref' when calling ContentApi->GetArchive");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling ContentApi->GetArchive");

            var localVarPath = "/repos/{owner}/{repo}/archive/{ref}{format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (_ref != null) localVarPathParams.Add("ref", this.Configuration.ApiClient.ParameterToString(_ref)); // path parameter
            if (format != null) localVarPathParams.Add("format", this.Configuration.ApiClient.ParameterToString(format)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List data in a repository folder List files, commit sha1, and versioning type for a folder in repository.  To get sizes add to the query param &#x60;include_size&#x3D;true&#x60;. May result in a slower response. 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="branch">branch of the repository</param>
        /// <param name="path">path of a folder in the repository</param>
        /// <param name="includeSize"> (optional, default to false)</param>
        /// <returns>Files</returns>
        public Files GetContent (string owner, string repo, string branch, string path, bool? includeSize = null)
        {
             ApiResponse<Files> localVarResponse = GetContentWithHttpInfo(owner, repo, branch, path, includeSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List data in a repository folder List files, commit sha1, and versioning type for a folder in repository.  To get sizes add to the query param &#x60;include_size&#x3D;true&#x60;. May result in a slower response. 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="branch">branch of the repository</param>
        /// <param name="path">path of a folder in the repository</param>
        /// <param name="includeSize"> (optional, default to false)</param>
        /// <returns>ApiResponse of Files</returns>
        public ApiResponse< Files > GetContentWithHttpInfo (string owner, string repo, string branch, string path, bool? includeSize = null)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ContentApi->GetContent");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling ContentApi->GetContent");
            // verify the required parameter 'branch' is set
            if (branch == null)
                throw new ApiException(400, "Missing required parameter 'branch' when calling ContentApi->GetContent");
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling ContentApi->GetContent");

            var localVarPath = "/repos/{owner}/{repo}/content/{branch}/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (branch != null) localVarPathParams.Add("branch", this.Configuration.ApiClient.ParameterToString(branch)); // path parameter
            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (includeSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_size", includeSize)); // query parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Files>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Files) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Files)));
        }

        /// <summary>
        /// List data in a repository folder List files, commit sha1, and versioning type for a folder in repository.  To get sizes add to the query param &#x60;include_size&#x3D;true&#x60;. May result in a slower response. 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="branch">branch of the repository</param>
        /// <param name="path">path of a folder in the repository</param>
        /// <param name="includeSize"> (optional, default to false)</param>
        /// <returns>Task of Files</returns>
        public async System.Threading.Tasks.Task<Files> GetContentAsync (string owner, string repo, string branch, string path, bool? includeSize = null)
        {
             ApiResponse<Files> localVarResponse = await GetContentAsyncWithHttpInfo(owner, repo, branch, path, includeSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List data in a repository folder List files, commit sha1, and versioning type for a folder in repository.  To get sizes add to the query param &#x60;include_size&#x3D;true&#x60;. May result in a slower response. 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="branch">branch of the repository</param>
        /// <param name="path">path of a folder in the repository</param>
        /// <param name="includeSize"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Files)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Files>> GetContentAsyncWithHttpInfo (string owner, string repo, string branch, string path, bool? includeSize = null)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ContentApi->GetContent");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling ContentApi->GetContent");
            // verify the required parameter 'branch' is set
            if (branch == null)
                throw new ApiException(400, "Missing required parameter 'branch' when calling ContentApi->GetContent");
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling ContentApi->GetContent");

            var localVarPath = "/repos/{owner}/{repo}/content/{branch}/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (branch != null) localVarPathParams.Add("branch", this.Configuration.ApiClient.ParameterToString(branch)); // path parameter
            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (includeSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_size", includeSize)); // query parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Files>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Files) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Files)));
        }

        /// <summary>
        /// Download raw content This method returns the raw content of a file.
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="_ref">The name of the commit/branch/tag</param>
        /// <param name="path">The content path</param>
        /// <returns></returns>
        public void GetRaw (string owner, string repo, string _ref, string path)
        {
             GetRawWithHttpInfo(owner, repo, _ref, path);
        }

        /// <summary>
        /// Download raw content This method returns the raw content of a file.
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="_ref">The name of the commit/branch/tag</param>
        /// <param name="path">The content path</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetRawWithHttpInfo (string owner, string repo, string _ref, string path)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ContentApi->GetRaw");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling ContentApi->GetRaw");
            // verify the required parameter '_ref' is set
            if (_ref == null)
                throw new ApiException(400, "Missing required parameter '_ref' when calling ContentApi->GetRaw");
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling ContentApi->GetRaw");

            var localVarPath = "/repos/{owner}/{repo}/raw/{ref}/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (_ref != null) localVarPathParams.Add("ref", this.Configuration.ApiClient.ParameterToString(_ref)); // path parameter
            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRaw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Download raw content This method returns the raw content of a file.
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="_ref">The name of the commit/branch/tag</param>
        /// <param name="path">The content path</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetRawAsync (string owner, string repo, string _ref, string path)
        {
             await GetRawAsyncWithHttpInfo(owner, repo, _ref, path);

        }

        /// <summary>
        /// Download raw content This method returns the raw content of a file.
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="_ref">The name of the commit/branch/tag</param>
        /// <param name="path">The content path</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetRawAsyncWithHttpInfo (string owner, string repo, string _ref, string path)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ContentApi->GetRaw");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling ContentApi->GetRaw");
            // verify the required parameter '_ref' is set
            if (_ref == null)
                throw new ApiException(400, "Missing required parameter '_ref' when calling ContentApi->GetRaw");
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling ContentApi->GetRaw");

            var localVarPath = "/repos/{owner}/{repo}/raw/{ref}/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (_ref != null) localVarPathParams.Add("ref", this.Configuration.ApiClient.ParameterToString(_ref)); // path parameter
            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRaw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Upload data to a repository 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="branch">branch of the repository</param>
        /// <param name="path">path of a folder in the repository</param>
        /// <param name="commitSummary"> (optional)</param>
        /// <param name="commitMessage"> (optional)</param>
        /// <param name="commitChoice"> (optional)</param>
        /// <param name="lastCommit"> (optional)</param>
        /// <param name="newBranchName"> (optional)</param>
        /// <param name="versioning"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns></returns>
        public void UploadContent (string owner, string repo, string branch, string path, string commitSummary = null, string commitMessage = null, string commitChoice = null, string lastCommit = null, string newBranchName = null, string versioning = null, string files = null)
        {
             UploadContentWithHttpInfo(owner, repo, branch, path, commitSummary, commitMessage, commitChoice, lastCommit, newBranchName, versioning, files);
        }

        /// <summary>
        /// Upload data to a repository 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="branch">branch of the repository</param>
        /// <param name="path">path of a folder in the repository</param>
        /// <param name="commitSummary"> (optional)</param>
        /// <param name="commitMessage"> (optional)</param>
        /// <param name="commitChoice"> (optional)</param>
        /// <param name="lastCommit"> (optional)</param>
        /// <param name="newBranchName"> (optional)</param>
        /// <param name="versioning"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UploadContentWithHttpInfo (string owner, string repo, string branch, string path, string commitSummary = null, string commitMessage = null, string commitChoice = null, string lastCommit = null, string newBranchName = null, string versioning = null, string files = null)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ContentApi->UploadContent");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling ContentApi->UploadContent");
            // verify the required parameter 'branch' is set
            if (branch == null)
                throw new ApiException(400, "Missing required parameter 'branch' when calling ContentApi->UploadContent");
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling ContentApi->UploadContent");

            var localVarPath = "/repos/{owner}/{repo}/content/{branch}/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (branch != null) localVarPathParams.Add("branch", this.Configuration.ApiClient.ParameterToString(branch)); // path parameter
            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (commitSummary != null) localVarFormParams.Add("commit_summary", this.Configuration.ApiClient.ParameterToString(commitSummary)); // form parameter
            if (commitMessage != null) localVarFormParams.Add("commit_message", this.Configuration.ApiClient.ParameterToString(commitMessage)); // form parameter
            if (commitChoice != null) localVarFormParams.Add("commit_choice", this.Configuration.ApiClient.ParameterToString(commitChoice)); // form parameter
            if (lastCommit != null) localVarFormParams.Add("last_commit", this.Configuration.ApiClient.ParameterToString(lastCommit)); // form parameter
            if (newBranchName != null) localVarFormParams.Add("new_branch_name", this.Configuration.ApiClient.ParameterToString(newBranchName)); // form parameter
            if (versioning != null) localVarFormParams.Add("versioning", this.Configuration.ApiClient.ParameterToString(versioning)); // form parameter
            if (files != null) localVarFormParams.Add("files", this.Configuration.ApiClient.ParameterToString(files)); // form parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Upload data to a repository 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="branch">branch of the repository</param>
        /// <param name="path">path of a folder in the repository</param>
        /// <param name="commitSummary"> (optional)</param>
        /// <param name="commitMessage"> (optional)</param>
        /// <param name="commitChoice"> (optional)</param>
        /// <param name="lastCommit"> (optional)</param>
        /// <param name="newBranchName"> (optional)</param>
        /// <param name="versioning"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UploadContentAsync (string owner, string repo, string branch, string path, string commitSummary = null, string commitMessage = null, string commitChoice = null, string lastCommit = null, string newBranchName = null, string versioning = null, string files = null)
        {
             await UploadContentAsyncWithHttpInfo(owner, repo, branch, path, commitSummary, commitMessage, commitChoice, lastCommit, newBranchName, versioning, files);

        }

        /// <summary>
        /// Upload data to a repository 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="branch">branch of the repository</param>
        /// <param name="path">path of a folder in the repository</param>
        /// <param name="commitSummary"> (optional)</param>
        /// <param name="commitMessage"> (optional)</param>
        /// <param name="commitChoice"> (optional)</param>
        /// <param name="lastCommit"> (optional)</param>
        /// <param name="newBranchName"> (optional)</param>
        /// <param name="versioning"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UploadContentAsyncWithHttpInfo (string owner, string repo, string branch, string path, string commitSummary = null, string commitMessage = null, string commitChoice = null, string lastCommit = null, string newBranchName = null, string versioning = null, string files = null)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ContentApi->UploadContent");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling ContentApi->UploadContent");
            // verify the required parameter 'branch' is set
            if (branch == null)
                throw new ApiException(400, "Missing required parameter 'branch' when calling ContentApi->UploadContent");
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling ContentApi->UploadContent");

            var localVarPath = "/repos/{owner}/{repo}/content/{branch}/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (branch != null) localVarPathParams.Add("branch", this.Configuration.ApiClient.ParameterToString(branch)); // path parameter
            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (commitSummary != null) localVarFormParams.Add("commit_summary", this.Configuration.ApiClient.ParameterToString(commitSummary)); // form parameter
            if (commitMessage != null) localVarFormParams.Add("commit_message", this.Configuration.ApiClient.ParameterToString(commitMessage)); // form parameter
            if (commitChoice != null) localVarFormParams.Add("commit_choice", this.Configuration.ApiClient.ParameterToString(commitChoice)); // form parameter
            if (lastCommit != null) localVarFormParams.Add("last_commit", this.Configuration.ApiClient.ParameterToString(lastCommit)); // form parameter
            if (newBranchName != null) localVarFormParams.Add("new_branch_name", this.Configuration.ApiClient.ParameterToString(newBranchName)); // form parameter
            if (versioning != null) localVarFormParams.Add("versioning", this.Configuration.ApiClient.ParameterToString(versioning)); // form parameter
            if (files != null) localVarFormParams.Add("files", this.Configuration.ApiClient.ParameterToString(files)); // form parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
