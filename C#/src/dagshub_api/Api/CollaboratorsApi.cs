/* 
 * DagsHub API
 *
 * This API provides a way to retrive & interact with data about DagsHub repositories, users, issues, webhooks and more. The API is also used by the [DagsHub Direct Data Access streaming client](https://github.com/DagsHub/client) to stream content from a repository for easier and faster training. 
 *
 * OpenAPI spec version: 1.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using dagshub_api.Client;
using dagshub_api.Model;

namespace dagshub_api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ICollaboratorsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add user as a collaborator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="collaborator">collaborator username</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void AddCollaborator (string owner, string repo, string collaborator, CollaboratorsCollaboratorBody body = null);

        /// <summary>
        /// Add user as a collaborator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="collaborator">collaborator username</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCollaboratorWithHttpInfo (string owner, string repo, string collaborator, CollaboratorsCollaboratorBody body = null);
        /// <summary>
        /// Get collaborators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <returns></returns>
        void GetCollaborators (string owner, string repo);

        /// <summary>
        /// Get collaborators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCollaboratorsWithHttpInfo (string owner, string repo);
        /// <summary>
        /// Delete collaborator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="collaborator">collaborator username</param>
        /// <returns></returns>
        void RemoveCollaborator (string owner, string repo, string collaborator);

        /// <summary>
        /// Delete collaborator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="collaborator">collaborator username</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveCollaboratorWithHttpInfo (string owner, string repo, string collaborator);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add user as a collaborator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="collaborator">collaborator username</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCollaboratorAsync (string owner, string repo, string collaborator, CollaboratorsCollaboratorBody body = null);

        /// <summary>
        /// Add user as a collaborator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="collaborator">collaborator username</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCollaboratorAsyncWithHttpInfo (string owner, string repo, string collaborator, CollaboratorsCollaboratorBody body = null);
        /// <summary>
        /// Get collaborators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetCollaboratorsAsync (string owner, string repo);

        /// <summary>
        /// Get collaborators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCollaboratorsAsyncWithHttpInfo (string owner, string repo);
        /// <summary>
        /// Delete collaborator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="collaborator">collaborator username</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveCollaboratorAsync (string owner, string repo, string collaborator);

        /// <summary>
        /// Delete collaborator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="collaborator">collaborator username</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveCollaboratorAsyncWithHttpInfo (string owner, string repo, string collaborator);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CollaboratorsApi : ICollaboratorsApi
    {
        private dagshub_api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CollaboratorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollaboratorsApi(String basePath)
        {
            this.Configuration = new dagshub_api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = dagshub_api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollaboratorsApi"/> class
        /// </summary>
        /// <returns></returns>
        public CollaboratorsApi()
        {
            this.Configuration = dagshub_api.Client.Configuration.Default;

            ExceptionFactory = dagshub_api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollaboratorsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CollaboratorsApi(dagshub_api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = dagshub_api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = dagshub_api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public dagshub_api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public dagshub_api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add user as a collaborator 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="collaborator">collaborator username</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void AddCollaborator (string owner, string repo, string collaborator, CollaboratorsCollaboratorBody body = null)
        {
             AddCollaboratorWithHttpInfo(owner, repo, collaborator, body);
        }

        /// <summary>
        /// Add user as a collaborator 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="collaborator">collaborator username</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddCollaboratorWithHttpInfo (string owner, string repo, string collaborator, CollaboratorsCollaboratorBody body = null)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling CollaboratorsApi->AddCollaborator");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling CollaboratorsApi->AddCollaborator");
            // verify the required parameter 'collaborator' is set
            if (collaborator == null)
                throw new ApiException(400, "Missing required parameter 'collaborator' when calling CollaboratorsApi->AddCollaborator");

            var localVarPath = "/repos/{owner}/{repo}/collaborators/{collaborator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (collaborator != null) localVarPathParams.Add("collaborator", this.Configuration.ApiClient.ParameterToString(collaborator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCollaborator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add user as a collaborator 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="collaborator">collaborator username</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCollaboratorAsync (string owner, string repo, string collaborator, CollaboratorsCollaboratorBody body = null)
        {
             await AddCollaboratorAsyncWithHttpInfo(owner, repo, collaborator, body);

        }

        /// <summary>
        /// Add user as a collaborator 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="collaborator">collaborator username</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddCollaboratorAsyncWithHttpInfo (string owner, string repo, string collaborator, CollaboratorsCollaboratorBody body = null)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling CollaboratorsApi->AddCollaborator");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling CollaboratorsApi->AddCollaborator");
            // verify the required parameter 'collaborator' is set
            if (collaborator == null)
                throw new ApiException(400, "Missing required parameter 'collaborator' when calling CollaboratorsApi->AddCollaborator");

            var localVarPath = "/repos/{owner}/{repo}/collaborators/{collaborator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (collaborator != null) localVarPathParams.Add("collaborator", this.Configuration.ApiClient.ParameterToString(collaborator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCollaborator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get collaborators 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <returns></returns>
        public void GetCollaborators (string owner, string repo)
        {
             GetCollaboratorsWithHttpInfo(owner, repo);
        }

        /// <summary>
        /// Get collaborators 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetCollaboratorsWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling CollaboratorsApi->GetCollaborators");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling CollaboratorsApi->GetCollaborators");

            var localVarPath = "/repos/{owner}/{repo}/collaborators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollaborators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get collaborators 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetCollaboratorsAsync (string owner, string repo)
        {
             await GetCollaboratorsAsyncWithHttpInfo(owner, repo);

        }

        /// <summary>
        /// Get collaborators 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCollaboratorsAsyncWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling CollaboratorsApi->GetCollaborators");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling CollaboratorsApi->GetCollaborators");

            var localVarPath = "/repos/{owner}/{repo}/collaborators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollaborators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete collaborator 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="collaborator">collaborator username</param>
        /// <returns></returns>
        public void RemoveCollaborator (string owner, string repo, string collaborator)
        {
             RemoveCollaboratorWithHttpInfo(owner, repo, collaborator);
        }

        /// <summary>
        /// Delete collaborator 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="collaborator">collaborator username</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveCollaboratorWithHttpInfo (string owner, string repo, string collaborator)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling CollaboratorsApi->RemoveCollaborator");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling CollaboratorsApi->RemoveCollaborator");
            // verify the required parameter 'collaborator' is set
            if (collaborator == null)
                throw new ApiException(400, "Missing required parameter 'collaborator' when calling CollaboratorsApi->RemoveCollaborator");

            var localVarPath = "/repos/{owner}/{repo}/collaborators/{collaborator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (collaborator != null) localVarPathParams.Add("collaborator", this.Configuration.ApiClient.ParameterToString(collaborator)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveCollaborator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete collaborator 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="collaborator">collaborator username</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveCollaboratorAsync (string owner, string repo, string collaborator)
        {
             await RemoveCollaboratorAsyncWithHttpInfo(owner, repo, collaborator);

        }

        /// <summary>
        /// Delete collaborator 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="collaborator">collaborator username</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveCollaboratorAsyncWithHttpInfo (string owner, string repo, string collaborator)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling CollaboratorsApi->RemoveCollaborator");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling CollaboratorsApi->RemoveCollaborator");
            // verify the required parameter 'collaborator' is set
            if (collaborator == null)
                throw new ApiException(400, "Missing required parameter 'collaborator' when calling CollaboratorsApi->RemoveCollaborator");

            var localVarPath = "/repos/{owner}/{repo}/collaborators/{collaborator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (collaborator != null) localVarPathParams.Add("collaborator", this.Configuration.ApiClient.ParameterToString(collaborator)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveCollaborator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
