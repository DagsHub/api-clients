/* 
 * DagsHub API
 *
 * This API provides a way to retrive & interact with data about DagsHub repositories, users, issues, webhooks and more. The API is also used by the [DagsHub Direct Data Access streaming client](https://github.com/DagsHub/client) to stream content from a repository for easier and faster training. 
 *
 * OpenAPI spec version: 1.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using dagshub_api.Client;
using dagshub_api.Model;

namespace dagshub_api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IExperimentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add label to experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="experimentLabel">A label for the experiment, max 128 characters.</param>
        /// <returns></returns>
        void AddExperimentLabel (string owner, string repo, string experimentKey, string experimentLabel);

        /// <summary>
        /// Add label to experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="experimentLabel">A label for the experiment, max 128 characters.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddExperimentLabelWithHttpInfo (string owner, string repo, string experimentKey, string experimentLabel);
        /// <summary>
        /// Delete experiment
        /// </summary>
        /// <remarks>
        /// Support both git and MLflow experiments
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <returns></returns>
        void DeleteExperiment (string owner, string repo, string experimentKey);

        /// <summary>
        /// Delete experiment
        /// </summary>
        /// <remarks>
        /// Support both git and MLflow experiments
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteExperimentWithHttpInfo (string owner, string repo, string experimentKey);
        /// <summary>
        /// Delete experiment label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="experimentLabel">A label for the experiment, max 128 characters.</param>
        /// <returns></returns>
        void DeleteExperimentLabel (string owner, string repo, string experimentKey, string experimentLabel);

        /// <summary>
        /// Delete experiment label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="experimentLabel">A label for the experiment, max 128 characters.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteExperimentLabelWithHttpInfo (string owner, string repo, string experimentKey, string experimentLabel);
        /// <summary>
        /// Edit experiment info
        /// </summary>
        /// <remarks>
        /// Edit experiment info, currently supports just changing experiment name.
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void EditExperiment (string owner, string repo, string experimentKey, EditExperimentPost body = null);

        /// <summary>
        /// Edit experiment info
        /// </summary>
        /// <remarks>
        /// Edit experiment info, currently supports just changing experiment name.
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditExperimentWithHttpInfo (string owner, string repo, string experimentKey, EditExperimentPost body = null);
        /// <summary>
        /// Get experiment metrics for experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void GetExperimentMetrics (string owner, string repo, ExperimentKeys body = null);

        /// <summary>
        /// Get experiment metrics for experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetExperimentMetricsWithHttpInfo (string owner, string repo, ExperimentKeys body = null);
        /// <summary>
        /// List Experiments
        /// </summary>
        /// <remarks>
        /// Get a list of experiments in the given repository
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <returns></returns>
        void GetExperiments (string owner, string repo);

        /// <summary>
        /// List Experiments
        /// </summary>
        /// <remarks>
        /// Get a list of experiments in the given repository
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetExperimentsWithHttpInfo (string owner, string repo);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add label to experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="experimentLabel">A label for the experiment, max 128 characters.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddExperimentLabelAsync (string owner, string repo, string experimentKey, string experimentLabel);

        /// <summary>
        /// Add label to experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="experimentLabel">A label for the experiment, max 128 characters.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddExperimentLabelAsyncWithHttpInfo (string owner, string repo, string experimentKey, string experimentLabel);
        /// <summary>
        /// Delete experiment
        /// </summary>
        /// <remarks>
        /// Support both git and MLflow experiments
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteExperimentAsync (string owner, string repo, string experimentKey);

        /// <summary>
        /// Delete experiment
        /// </summary>
        /// <remarks>
        /// Support both git and MLflow experiments
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteExperimentAsyncWithHttpInfo (string owner, string repo, string experimentKey);
        /// <summary>
        /// Delete experiment label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="experimentLabel">A label for the experiment, max 128 characters.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteExperimentLabelAsync (string owner, string repo, string experimentKey, string experimentLabel);

        /// <summary>
        /// Delete experiment label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="experimentLabel">A label for the experiment, max 128 characters.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteExperimentLabelAsyncWithHttpInfo (string owner, string repo, string experimentKey, string experimentLabel);
        /// <summary>
        /// Edit experiment info
        /// </summary>
        /// <remarks>
        /// Edit experiment info, currently supports just changing experiment name.
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditExperimentAsync (string owner, string repo, string experimentKey, EditExperimentPost body = null);

        /// <summary>
        /// Edit experiment info
        /// </summary>
        /// <remarks>
        /// Edit experiment info, currently supports just changing experiment name.
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditExperimentAsyncWithHttpInfo (string owner, string repo, string experimentKey, EditExperimentPost body = null);
        /// <summary>
        /// Get experiment metrics for experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetExperimentMetricsAsync (string owner, string repo, ExperimentKeys body = null);

        /// <summary>
        /// Get experiment metrics for experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetExperimentMetricsAsyncWithHttpInfo (string owner, string repo, ExperimentKeys body = null);
        /// <summary>
        /// List Experiments
        /// </summary>
        /// <remarks>
        /// Get a list of experiments in the given repository
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetExperimentsAsync (string owner, string repo);

        /// <summary>
        /// List Experiments
        /// </summary>
        /// <remarks>
        /// Get a list of experiments in the given repository
        /// </remarks>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetExperimentsAsyncWithHttpInfo (string owner, string repo);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ExperimentsApi : IExperimentsApi
    {
        private dagshub_api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExperimentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExperimentsApi(String basePath)
        {
            this.Configuration = new dagshub_api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = dagshub_api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExperimentsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ExperimentsApi()
        {
            this.Configuration = dagshub_api.Client.Configuration.Default;

            ExceptionFactory = dagshub_api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExperimentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExperimentsApi(dagshub_api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = dagshub_api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = dagshub_api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public dagshub_api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public dagshub_api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add label to experiment 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="experimentLabel">A label for the experiment, max 128 characters.</param>
        /// <returns></returns>
        public void AddExperimentLabel (string owner, string repo, string experimentKey, string experimentLabel)
        {
             AddExperimentLabelWithHttpInfo(owner, repo, experimentKey, experimentLabel);
        }

        /// <summary>
        /// Add label to experiment 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="experimentLabel">A label for the experiment, max 128 characters.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddExperimentLabelWithHttpInfo (string owner, string repo, string experimentKey, string experimentLabel)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ExperimentsApi->AddExperimentLabel");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling ExperimentsApi->AddExperimentLabel");
            // verify the required parameter 'experimentKey' is set
            if (experimentKey == null)
                throw new ApiException(400, "Missing required parameter 'experimentKey' when calling ExperimentsApi->AddExperimentLabel");
            // verify the required parameter 'experimentLabel' is set
            if (experimentLabel == null)
                throw new ApiException(400, "Missing required parameter 'experimentLabel' when calling ExperimentsApi->AddExperimentLabel");

            var localVarPath = "/repos/{owner}/{repo}/experiments/experiment/{experimentKey}/labels/{experimentLabel}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (experimentKey != null) localVarPathParams.Add("experimentKey", this.Configuration.ApiClient.ParameterToString(experimentKey)); // path parameter
            if (experimentLabel != null) localVarPathParams.Add("experimentLabel", this.Configuration.ApiClient.ParameterToString(experimentLabel)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExperimentLabel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add label to experiment 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="experimentLabel">A label for the experiment, max 128 characters.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddExperimentLabelAsync (string owner, string repo, string experimentKey, string experimentLabel)
        {
             await AddExperimentLabelAsyncWithHttpInfo(owner, repo, experimentKey, experimentLabel);

        }

        /// <summary>
        /// Add label to experiment 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="experimentLabel">A label for the experiment, max 128 characters.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddExperimentLabelAsyncWithHttpInfo (string owner, string repo, string experimentKey, string experimentLabel)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ExperimentsApi->AddExperimentLabel");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling ExperimentsApi->AddExperimentLabel");
            // verify the required parameter 'experimentKey' is set
            if (experimentKey == null)
                throw new ApiException(400, "Missing required parameter 'experimentKey' when calling ExperimentsApi->AddExperimentLabel");
            // verify the required parameter 'experimentLabel' is set
            if (experimentLabel == null)
                throw new ApiException(400, "Missing required parameter 'experimentLabel' when calling ExperimentsApi->AddExperimentLabel");

            var localVarPath = "/repos/{owner}/{repo}/experiments/experiment/{experimentKey}/labels/{experimentLabel}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (experimentKey != null) localVarPathParams.Add("experimentKey", this.Configuration.ApiClient.ParameterToString(experimentKey)); // path parameter
            if (experimentLabel != null) localVarPathParams.Add("experimentLabel", this.Configuration.ApiClient.ParameterToString(experimentLabel)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExperimentLabel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete experiment Support both git and MLflow experiments
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <returns></returns>
        public void DeleteExperiment (string owner, string repo, string experimentKey)
        {
             DeleteExperimentWithHttpInfo(owner, repo, experimentKey);
        }

        /// <summary>
        /// Delete experiment Support both git and MLflow experiments
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteExperimentWithHttpInfo (string owner, string repo, string experimentKey)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ExperimentsApi->DeleteExperiment");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling ExperimentsApi->DeleteExperiment");
            // verify the required parameter 'experimentKey' is set
            if (experimentKey == null)
                throw new ApiException(400, "Missing required parameter 'experimentKey' when calling ExperimentsApi->DeleteExperiment");

            var localVarPath = "/repos/{owner}/{repo}/experiments/experiment/{experimentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (experimentKey != null) localVarPathParams.Add("experimentKey", this.Configuration.ApiClient.ParameterToString(experimentKey)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete experiment Support both git and MLflow experiments
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteExperimentAsync (string owner, string repo, string experimentKey)
        {
             await DeleteExperimentAsyncWithHttpInfo(owner, repo, experimentKey);

        }

        /// <summary>
        /// Delete experiment Support both git and MLflow experiments
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteExperimentAsyncWithHttpInfo (string owner, string repo, string experimentKey)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ExperimentsApi->DeleteExperiment");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling ExperimentsApi->DeleteExperiment");
            // verify the required parameter 'experimentKey' is set
            if (experimentKey == null)
                throw new ApiException(400, "Missing required parameter 'experimentKey' when calling ExperimentsApi->DeleteExperiment");

            var localVarPath = "/repos/{owner}/{repo}/experiments/experiment/{experimentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (experimentKey != null) localVarPathParams.Add("experimentKey", this.Configuration.ApiClient.ParameterToString(experimentKey)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete experiment label 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="experimentLabel">A label for the experiment, max 128 characters.</param>
        /// <returns></returns>
        public void DeleteExperimentLabel (string owner, string repo, string experimentKey, string experimentLabel)
        {
             DeleteExperimentLabelWithHttpInfo(owner, repo, experimentKey, experimentLabel);
        }

        /// <summary>
        /// Delete experiment label 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="experimentLabel">A label for the experiment, max 128 characters.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteExperimentLabelWithHttpInfo (string owner, string repo, string experimentKey, string experimentLabel)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ExperimentsApi->DeleteExperimentLabel");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling ExperimentsApi->DeleteExperimentLabel");
            // verify the required parameter 'experimentKey' is set
            if (experimentKey == null)
                throw new ApiException(400, "Missing required parameter 'experimentKey' when calling ExperimentsApi->DeleteExperimentLabel");
            // verify the required parameter 'experimentLabel' is set
            if (experimentLabel == null)
                throw new ApiException(400, "Missing required parameter 'experimentLabel' when calling ExperimentsApi->DeleteExperimentLabel");

            var localVarPath = "/repos/{owner}/{repo}/experiments/experiment/{experimentKey}/labels/{experimentLabel}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (experimentKey != null) localVarPathParams.Add("experimentKey", this.Configuration.ApiClient.ParameterToString(experimentKey)); // path parameter
            if (experimentLabel != null) localVarPathParams.Add("experimentLabel", this.Configuration.ApiClient.ParameterToString(experimentLabel)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteExperimentLabel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete experiment label 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="experimentLabel">A label for the experiment, max 128 characters.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteExperimentLabelAsync (string owner, string repo, string experimentKey, string experimentLabel)
        {
             await DeleteExperimentLabelAsyncWithHttpInfo(owner, repo, experimentKey, experimentLabel);

        }

        /// <summary>
        /// Delete experiment label 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="experimentLabel">A label for the experiment, max 128 characters.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteExperimentLabelAsyncWithHttpInfo (string owner, string repo, string experimentKey, string experimentLabel)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ExperimentsApi->DeleteExperimentLabel");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling ExperimentsApi->DeleteExperimentLabel");
            // verify the required parameter 'experimentKey' is set
            if (experimentKey == null)
                throw new ApiException(400, "Missing required parameter 'experimentKey' when calling ExperimentsApi->DeleteExperimentLabel");
            // verify the required parameter 'experimentLabel' is set
            if (experimentLabel == null)
                throw new ApiException(400, "Missing required parameter 'experimentLabel' when calling ExperimentsApi->DeleteExperimentLabel");

            var localVarPath = "/repos/{owner}/{repo}/experiments/experiment/{experimentKey}/labels/{experimentLabel}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (experimentKey != null) localVarPathParams.Add("experimentKey", this.Configuration.ApiClient.ParameterToString(experimentKey)); // path parameter
            if (experimentLabel != null) localVarPathParams.Add("experimentLabel", this.Configuration.ApiClient.ParameterToString(experimentLabel)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteExperimentLabel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Edit experiment info Edit experiment info, currently supports just changing experiment name.
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void EditExperiment (string owner, string repo, string experimentKey, EditExperimentPost body = null)
        {
             EditExperimentWithHttpInfo(owner, repo, experimentKey, body);
        }

        /// <summary>
        /// Edit experiment info Edit experiment info, currently supports just changing experiment name.
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EditExperimentWithHttpInfo (string owner, string repo, string experimentKey, EditExperimentPost body = null)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ExperimentsApi->EditExperiment");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling ExperimentsApi->EditExperiment");
            // verify the required parameter 'experimentKey' is set
            if (experimentKey == null)
                throw new ApiException(400, "Missing required parameter 'experimentKey' when calling ExperimentsApi->EditExperiment");

            var localVarPath = "/repos/{owner}/{repo}/experiments/experiment/{experimentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (experimentKey != null) localVarPathParams.Add("experimentKey", this.Configuration.ApiClient.ParameterToString(experimentKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Edit experiment info Edit experiment info, currently supports just changing experiment name.
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditExperimentAsync (string owner, string repo, string experimentKey, EditExperimentPost body = null)
        {
             await EditExperimentAsyncWithHttpInfo(owner, repo, experimentKey, body);

        }

        /// <summary>
        /// Edit experiment info Edit experiment info, currently supports just changing experiment name.
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="experimentKey">a valid experiment key</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EditExperimentAsyncWithHttpInfo (string owner, string repo, string experimentKey, EditExperimentPost body = null)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ExperimentsApi->EditExperiment");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling ExperimentsApi->EditExperiment");
            // verify the required parameter 'experimentKey' is set
            if (experimentKey == null)
                throw new ApiException(400, "Missing required parameter 'experimentKey' when calling ExperimentsApi->EditExperiment");

            var localVarPath = "/repos/{owner}/{repo}/experiments/experiment/{experimentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (experimentKey != null) localVarPathParams.Add("experimentKey", this.Configuration.ApiClient.ParameterToString(experimentKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get experiment metrics for experiment 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void GetExperimentMetrics (string owner, string repo, ExperimentKeys body = null)
        {
             GetExperimentMetricsWithHttpInfo(owner, repo, body);
        }

        /// <summary>
        /// Get experiment metrics for experiment 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetExperimentMetricsWithHttpInfo (string owner, string repo, ExperimentKeys body = null)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ExperimentsApi->GetExperimentMetrics");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling ExperimentsApi->GetExperimentMetrics");

            var localVarPath = "/repos/{owner}/{repo}/experiments/metricsForExperiments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExperimentMetrics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get experiment metrics for experiment 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetExperimentMetricsAsync (string owner, string repo, ExperimentKeys body = null)
        {
             await GetExperimentMetricsAsyncWithHttpInfo(owner, repo, body);

        }

        /// <summary>
        /// Get experiment metrics for experiment 
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetExperimentMetricsAsyncWithHttpInfo (string owner, string repo, ExperimentKeys body = null)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ExperimentsApi->GetExperimentMetrics");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling ExperimentsApi->GetExperimentMetrics");

            var localVarPath = "/repos/{owner}/{repo}/experiments/metricsForExperiments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExperimentMetrics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List Experiments Get a list of experiments in the given repository
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <returns></returns>
        public void GetExperiments (string owner, string repo)
        {
             GetExperimentsWithHttpInfo(owner, repo);
        }

        /// <summary>
        /// List Experiments Get a list of experiments in the given repository
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetExperimentsWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ExperimentsApi->GetExperiments");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling ExperimentsApi->GetExperiments");

            var localVarPath = "/repos/{owner}/{repo}/experiments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExperiments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List Experiments Get a list of experiments in the given repository
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetExperimentsAsync (string owner, string repo)
        {
             await GetExperimentsAsyncWithHttpInfo(owner, repo);

        }

        /// <summary>
        /// List Experiments Get a list of experiments in the given repository
        /// </summary>
        /// <exception cref="dagshub_api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repository</param>
        /// <param name="repo">name of the repository</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetExperimentsAsyncWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ExperimentsApi->GetExperiments");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling ExperimentsApi->GetExperiments");

            var localVarPath = "/repos/{owner}/{repo}/experiments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExperiments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
