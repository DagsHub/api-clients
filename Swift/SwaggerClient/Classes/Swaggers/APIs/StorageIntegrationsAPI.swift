//
// StorageIntegrationsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class StorageIntegrationsAPI {
    /**
     * enum for parameter _protocol
     */
    public enum ModelProtocol_getBucketContent: String { 
        case gs = "gs"
        case s3 = "s3"
    }

    /**
     List contents in the path

     - parameter owner: (path) owner of the repository 
     - parameter repo: (path) name of the repository 
     - parameter _protocol: (path) protocol of the storage integration 
     - parameter bucket: (path) name and prefix of the bucket integration 
     - parameter path: (path) path of a folder in the repository 
     - parameter includeSize: (query)  (optional, default to false)
     - parameter limit: (query) Maximum amount of items to return (optional, default to 100)
     - parameter fromToken: (query) Token, from which to continue iteration (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBucketContent(owner: String, repo: String, _protocol: ModelProtocol_getBucketContent, bucket: String, path: String, includeSize: Bool? = nil, limit: Int? = nil, fromToken: String? = nil, completion: @escaping ((_ data: Files1?,_ error: Error?) -> Void)) {
        getBucketContentWithRequestBuilder(owner: owner, repo: repo, _protocol: _protocol, bucket: bucket, path: path, includeSize: includeSize, limit: limit, fromToken: fromToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List contents in the path
     - GET /repos/{owner}/{repo}/storage/content/{protocol}/{bucket}/{path}
     - 

     - BASIC:
       - type: http
       - name: basicAuth
     - API Key:
       - type: apiKey token (QUERY)
       - name: tokenAuth
     - examples: [{contentType=application/json, example={
  "entries" : [ {
    "path" : "images/000.png",
    "versioning" : "dvc",
    "size" : 421,
    "download_url" : "https://dagshub.com/Simon/baby-yoda-segmentation-dataset/raw/master/images/000.png",
    "content_url" : "https://dagshub.com/Simon/baby-yoda-segmentation-dataset/content/master/images/000.png",
    "type" : "[file]",
    "hash" : "79fb7f8632d7e15b3b46a7411d08bcdd"
  }, {
    "path" : "images/000.png",
    "versioning" : "dvc",
    "size" : 421,
    "download_url" : "https://dagshub.com/Simon/baby-yoda-segmentation-dataset/raw/master/images/000.png",
    "content_url" : "https://dagshub.com/Simon/baby-yoda-segmentation-dataset/content/master/images/000.png",
    "type" : "[file]",
    "hash" : "79fb7f8632d7e15b3b46a7411d08bcdd"
  } ],
  "limit" : 0,
  "next_token" : "next_token"
}}]
     - parameter owner: (path) owner of the repository 
     - parameter repo: (path) name of the repository 
     - parameter _protocol: (path) protocol of the storage integration 
     - parameter bucket: (path) name and prefix of the bucket integration 
     - parameter path: (path) path of a folder in the repository 
     - parameter includeSize: (query)  (optional, default to false)
     - parameter limit: (query) Maximum amount of items to return (optional, default to 100)
     - parameter fromToken: (query) Token, from which to continue iteration (optional)

     - returns: RequestBuilder<Files1> 
     */
    open class func getBucketContentWithRequestBuilder(owner: String, repo: String, _protocol: ModelProtocol_getBucketContent, bucket: String, path: String, includeSize: Bool? = nil, limit: Int? = nil, fromToken: String? = nil) -> RequestBuilder<Files1> {
        var path = "/repos/{owner}/{repo}/storage/content/{protocol}/{bucket}/{path}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _protocolPreEscape = "\(_protocol.rawValue)"
        let _protocolPostEscape = _protocolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{protocol}", with: _protocolPostEscape, options: .literal, range: nil)
        let bucketPreEscape = "\(bucket)"
        let bucketPostEscape = bucketPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{bucket}", with: bucketPostEscape, options: .literal, range: nil)
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "include_size": includeSize, 
                        "limit": limit?.encodeToJSON(), 
                        "from_token": fromToken
        ])


        let requestBuilder: RequestBuilder<Files1>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter _protocol
     */
    public enum ModelProtocol_getBucketFile: String { 
        case gs = "gs"
        case s3 = "s3"
    }

    /**
     Get file in the bucket

     - parameter owner: (path) owner of the repository 
     - parameter repo: (path) name of the repository 
     - parameter _protocol: (path) protocol of the storage integration 
     - parameter bucket: (path) name and prefix of the bucket integration 
     - parameter path: (path) The content path 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBucketFile(owner: String, repo: String, _protocol: ModelProtocol_getBucketFile, bucket: String, path: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getBucketFileWithRequestBuilder(owner: owner, repo: repo, _protocol: _protocol, bucket: bucket, path: path).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get file in the bucket
     - GET /repos/{owner}/{repo}/storage/raw/{protocol}/{bucket}/{path}
     - 

     - BASIC:
       - type: http
       - name: basicAuth
     - API Key:
       - type: apiKey token (QUERY)
       - name: tokenAuth
     - parameter owner: (path) owner of the repository 
     - parameter repo: (path) name of the repository 
     - parameter _protocol: (path) protocol of the storage integration 
     - parameter bucket: (path) name and prefix of the bucket integration 
     - parameter path: (path) The content path 

     - returns: RequestBuilder<Void> 
     */
    open class func getBucketFileWithRequestBuilder(owner: String, repo: String, _protocol: ModelProtocol_getBucketFile, bucket: String, path: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/storage/raw/{protocol}/{bucket}/{path}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _protocolPreEscape = "\(_protocol.rawValue)"
        let _protocolPostEscape = _protocolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{protocol}", with: _protocolPostEscape, options: .literal, range: nil)
        let bucketPreEscape = "\(bucket)"
        let bucketPostEscape = bucketPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{bucket}", with: bucketPostEscape, options: .literal, range: nil)
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List integrated storages in the repository

     - parameter owner: (path) owner of the repository 
     - parameter repo: (path) name of the repository 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBuckets(owner: String, repo: String, completion: @escaping ((_ data: Integration?,_ error: Error?) -> Void)) {
        getBucketsWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List integrated storages in the repository
     - GET /repos/{owner}/{repo}/storage
     - 

     - BASIC:
       - type: http
       - name: basicAuth
     - API Key:
       - type: apiKey token (QUERY)
       - name: tokenAuth
     - examples: [{contentType=application/json, example=[ {
  "protocol" : "s3",
  "name" : "name",
  "list_path" : "list_path"
}, {
  "protocol" : "s3",
  "name" : "name",
  "list_path" : "list_path"
} ]}]
     - parameter owner: (path) owner of the repository 
     - parameter repo: (path) name of the repository 

     - returns: RequestBuilder<Integration> 
     */
    open class func getBucketsWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<Integration> {
        var path = "/repos/{owner}/{repo}/storage"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Integration>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
