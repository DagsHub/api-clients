//
// ExperimentsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ExperimentsAPI {
    /**
     Add label to experiment

     - parameter owner: (path) owner of the repository 
     - parameter repo: (path) name of the repository 
     - parameter experimentKey: (path) a valid experiment key 
     - parameter experimentLabel: (path) A label for the experiment, max 128 characters. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addExperimentLabel(owner: String, repo: String, experimentKey: String, experimentLabel: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        addExperimentLabelWithRequestBuilder(owner: owner, repo: repo, experimentKey: experimentKey, experimentLabel: experimentLabel).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Add label to experiment
     - POST /repos/{owner}/{repo}/experiments/experiment/{experimentKey}/labels/{experimentLabel}
     - 

     - BASIC:
       - type: http
       - name: basicAuth
     - API Key:
       - type: apiKey token (QUERY)
       - name: tokenAuth
     - parameter owner: (path) owner of the repository 
     - parameter repo: (path) name of the repository 
     - parameter experimentKey: (path) a valid experiment key 
     - parameter experimentLabel: (path) A label for the experiment, max 128 characters. 

     - returns: RequestBuilder<Void> 
     */
    open class func addExperimentLabelWithRequestBuilder(owner: String, repo: String, experimentKey: String, experimentLabel: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/experiments/experiment/{experimentKey}/labels/{experimentLabel}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let experimentKeyPreEscape = "\(experimentKey)"
        let experimentKeyPostEscape = experimentKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{experimentKey}", with: experimentKeyPostEscape, options: .literal, range: nil)
        let experimentLabelPreEscape = "\(experimentLabel)"
        let experimentLabelPostEscape = experimentLabelPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{experimentLabel}", with: experimentLabelPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Delete experiment label

     - parameter owner: (path) owner of the repository 
     - parameter repo: (path) name of the repository 
     - parameter experimentKey: (path) a valid experiment key 
     - parameter experimentLabel: (path) A label for the experiment, max 128 characters. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteExperimentLabel(owner: String, repo: String, experimentKey: String, experimentLabel: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteExperimentLabelWithRequestBuilder(owner: owner, repo: repo, experimentKey: experimentKey, experimentLabel: experimentLabel).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete experiment label
     - DELETE /repos/{owner}/{repo}/experiments/experiment/{experimentKey}/labels/{experimentLabel}
     - 

     - BASIC:
       - type: http
       - name: basicAuth
     - API Key:
       - type: apiKey token (QUERY)
       - name: tokenAuth
     - parameter owner: (path) owner of the repository 
     - parameter repo: (path) name of the repository 
     - parameter experimentKey: (path) a valid experiment key 
     - parameter experimentLabel: (path) A label for the experiment, max 128 characters. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteExperimentLabelWithRequestBuilder(owner: String, repo: String, experimentKey: String, experimentLabel: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/experiments/experiment/{experimentKey}/labels/{experimentLabel}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let experimentKeyPreEscape = "\(experimentKey)"
        let experimentKeyPostEscape = experimentKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{experimentKey}", with: experimentKeyPostEscape, options: .literal, range: nil)
        let experimentLabelPreEscape = "\(experimentLabel)"
        let experimentLabelPostEscape = experimentLabelPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{experimentLabel}", with: experimentLabelPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Edit experiment info

     - parameter owner: (path) owner of the repository 
     - parameter repo: (path) name of the repository 
     - parameter experimentKey: (path) a valid experiment key 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func editExperiment(owner: String, repo: String, experimentKey: String, body: EditExperimentPost? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        editExperimentWithRequestBuilder(owner: owner, repo: repo, experimentKey: experimentKey, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Edit experiment info
     - POST /repos/{owner}/{repo}/experiments/experiment/{experimentKey}

     - BASIC:
       - type: http
       - name: basicAuth
     - API Key:
       - type: apiKey token (QUERY)
       - name: tokenAuth
     - parameter owner: (path) owner of the repository 
     - parameter repo: (path) name of the repository 
     - parameter experimentKey: (path) a valid experiment key 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func editExperimentWithRequestBuilder(owner: String, repo: String, experimentKey: String, body: EditExperimentPost? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/experiments/experiment/{experimentKey}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let experimentKeyPreEscape = "\(experimentKey)"
        let experimentKeyPostEscape = experimentKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{experimentKey}", with: experimentKeyPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Get experiment metrics for experiment

     - parameter owner: (path) owner of the repository 
     - parameter repo: (path) name of the repository 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExperimentMetrics(owner: String, repo: String, body: ExperimentKeys? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getExperimentMetricsWithRequestBuilder(owner: owner, repo: repo, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get experiment metrics for experiment
     - POST /repos/{owner}/{repo}/experiments/metricsForExperiments
     - 

     - BASIC:
       - type: http
       - name: basicAuth
     - API Key:
       - type: apiKey token (QUERY)
       - name: tokenAuth
     - parameter owner: (path) owner of the repository 
     - parameter repo: (path) name of the repository 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getExperimentMetricsWithRequestBuilder(owner: String, repo: String, body: ExperimentKeys? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/experiments/metricsForExperiments"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     List Experiments

     - parameter owner: (path) owner of the repository 
     - parameter repo: (path) name of the repository 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExperiments(owner: String, repo: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getExperimentsWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     List Experiments
     - GET /repos/{owner}/{repo}/experiments

     - BASIC:
       - type: http
       - name: basicAuth
     - API Key:
       - type: apiKey token (QUERY)
       - name: tokenAuth
     - parameter owner: (path) owner of the repository 
     - parameter repo: (path) name of the repository 

     - returns: RequestBuilder<Void> 
     */
    open class func getExperimentsWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/experiments"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
