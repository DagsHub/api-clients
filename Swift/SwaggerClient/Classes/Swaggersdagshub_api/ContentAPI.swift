//
// ContentAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ContentAPI {
    /**
     * enum for parameter format
     */
    public enum Format_getArchive: String { 
        case zip = ".zip"
        case tarGz = ".tar.gz"
    }

    /**
     Download archive

     - parameter username: (path) A DagsHub username 
     - parameter repo: (path) name of the repository 
     - parameter ref: (path) The name of the commit/branch/tag 
     - parameter format: (path) The format of archive, either .zip or .tar.gz 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getArchive(username: String, repo: String, ref: String, format: Format_getArchive, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getArchiveWithRequestBuilder(username: username, repo: repo, ref: ref, format: format).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Download archive
     - GET /repos/{username}/{repo}/archive/{ref}/{format}

     - BASIC:
       - type: http
       - name: basicAuth
     - API Key:
       - type: apiKey token (QUERY)
       - name: tokenAuth
     - parameter username: (path) A DagsHub username 
     - parameter repo: (path) name of the repository 
     - parameter ref: (path) The name of the commit/branch/tag 
     - parameter format: (path) The format of archive, either .zip or .tar.gz 

     - returns: RequestBuilder<Void> 
     */
    open class func getArchiveWithRequestBuilder(username: String, repo: String, ref: String, format: Format_getArchive) -> RequestBuilder<Void> {
        var path = "/repos/{username}/{repo}/archive/{ref}/{format}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let refPreEscape = "\(ref)"
        let refPostEscape = refPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ref}", with: refPostEscape, options: .literal, range: nil)
        let formatPreEscape = "\(format.rawValue)"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{format}", with: formatPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Download raw content

     - parameter username: (path) A DagsHub username 
     - parameter repo: (path) name of the repository 
     - parameter ref: (path) The name of the commit/branch/tag 
     - parameter path: (path) The content path 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRaw(username: String, repo: String, ref: String, path: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getRawWithRequestBuilder(username: username, repo: repo, ref: ref, path: path).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Download raw content
     - GET /repos/{username}/{repo}/raw/{ref}/{path}

     - BASIC:
       - type: http
       - name: basicAuth
     - API Key:
       - type: apiKey token (QUERY)
       - name: tokenAuth
     - parameter username: (path) A DagsHub username 
     - parameter repo: (path) name of the repository 
     - parameter ref: (path) The name of the commit/branch/tag 
     - parameter path: (path) The content path 

     - returns: RequestBuilder<Void> 
     */
    open class func getRawWithRequestBuilder(username: String, repo: String, ref: String, path: String) -> RequestBuilder<Void> {
        var path = "/repos/{username}/{repo}/raw/{ref}/{path}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let refPreEscape = "\(ref)"
        let refPostEscape = refPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ref}", with: refPostEscape, options: .literal, range: nil)
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
