/**
 * DagsHub API
 * The api docs are made with SwaggerUI using the OpenAPI 3 specification. 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.Issue
import io.swagger.client.models.Issues
import io.swagger.client.models.PatchIssue
import io.swagger.client.models.PostIssue

import dagshub_api.infrastructure.*

class IssuesApi(basePath: kotlin.String = "https://dagshub.com/api/v1/") : ApiClient(basePath) {

    /**
     * Create an issue
     * Any user with read access to a repository can create an issue.
     * @param owner owner of the repository 
     * @param repo name of the repository 
     * @param body  (optional)
     * @return Issue
     */
    @Suppress("UNCHECKED_CAST")
    fun createIssue(owner: kotlin.String, repo: kotlin.String, body: PostIssue? = null): Issue {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/repos/{owner}/{repo}/issues".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"), query = localVariableQuery
        )
        val response = request<Issue>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Issue
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Edit an issue
     * 
     * @param owner owner of the repository 
     * @param repo name of the repository 
     * @param body  (optional)
     * @return Issue
     */
    @Suppress("UNCHECKED_CAST")
    fun editIssue(owner: kotlin.String, repo: kotlin.String, body: PatchIssue? = null): Issue {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/repos/{owner}/{repo}/issues".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"), query = localVariableQuery
        )
        val response = request<Issue>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Issue
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get a single issue
     * This endpoint may also return pull requests in the response. If an issue is a pull request, the object will include a pull_request key.
     * @param owner owner of the repository 
     * @param repo name of the repository 
     * @param index the index of an issue or a pull request 
     * @return Issue
     */
    @Suppress("UNCHECKED_CAST")
    fun getIssue(owner: kotlin.String, repo: kotlin.String, index: kotlin.Int): Issue {
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/repos/{owner}/{repo}/issues/{index}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "index" + "}", "$index"), query = localVariableQuery
        )
        val response = request<Issue>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Issue
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List issues for a repository
     * This endpoint may also return pull requests in the response. If an issue is a pull request, the object will include a pull_request key.
     * @param owner owner of the repository 
     * @param repo name of the repository 
     * @return Issues
     */
    @Suppress("UNCHECKED_CAST")
    fun listRepoIssues(owner: kotlin.String, repo: kotlin.String): Issues {
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/repos/{owner}/{repo}/issues".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"), query = localVariableQuery
        )
        val response = request<Issues>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Issues
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
