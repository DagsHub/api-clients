/**
 * DagsHub API
 * The api docs are made with SwaggerUI using the OpenAPI 3 specification. 
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package dagshub_api


import dagshub_api.infrastructure.*

class ContentApi(basePath: kotlin.String = "http://dagshub.com/api/v1/") : ApiClient(basePath) {

    /**
     * Download archive
     * This method returns archive by given format.
     * @param username A DagsHub username 
     * @param repo name of the repository 
     * @param ref The name of the commit/branch/tag 
     * @param format The format of archive, either .zip or .tar.gz 
     * @return void
     */
    fun getArchive(username: kotlin.String, repo: kotlin.String, ref: kotlin.String, format: kotlin.String): Unit {
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/repos/{username}/{repo}/archive/{ref}/{format}".replace("{" + "username" + "}", "$username").replace("{" + "repo" + "}", "$repo").replace("{" + "ref" + "}", "$ref").replace("{" + "format" + "}", "$format"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Download raw content
     * This method returns the raw content of a file.
     * @param username A DagsHub username 
     * @param repo name of the repository 
     * @param ref The name of the commit/branch/tag 
     * @param path The content path 
     * @return void
     */
    fun getRaw(username: kotlin.String, repo: kotlin.String, ref: kotlin.String, path: kotlin.String): Unit {
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/repos/{username}/{repo}/raw/{ref}/{path}".replace("{" + "username" + "}", "$username").replace("{" + "repo" + "}", "$repo").replace("{" + "ref" + "}", "$ref").replace("{" + "path" + "}", "$path"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
