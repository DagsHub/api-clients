/*
 * DagsHub API
 * This API provides a way to retrive & interact with data about DagsHub repositories, users, issues, webhooks and more. The API is also used by the [DagsHub Direct Data Access streaming client](https://github.com/DagsHub/client) to stream content from a repository for easier and faster training. 
 *
 * OpenAPI spec version: 1.0.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The PutFile model module.
 * @module model/PutFile
 * @version 1.0.2
 */
export class PutFile {
  /**
   * Constructs a new <code>PutFile</code>.
   * @alias module:model/PutFile
   * @class
   * @param commitChoice {module:model/PutFile.CommitChoiceEnum} 
   * @param files {String} This property can be sent multiple times to upload multiple files.
   */
  constructor(commitChoice, files) {
    this.commitChoice = commitChoice;
    this.files = files;
  }

  /**
   * Constructs a <code>PutFile</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PutFile} obj Optional instance to populate.
   * @return {module:model/PutFile} The populated <code>PutFile</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new PutFile();
      if (data.hasOwnProperty('commit_summary'))
        obj.commitSummary = ApiClient.convertToType(data['commit_summary'], 'String');
      if (data.hasOwnProperty('commit_message'))
        obj.commitMessage = ApiClient.convertToType(data['commit_message'], 'String');
      if (data.hasOwnProperty('commit_choice'))
        obj.commitChoice = ApiClient.convertToType(data['commit_choice'], 'String');
      if (data.hasOwnProperty('last_commit'))
        obj.lastCommit = ApiClient.convertToType(data['last_commit'], 'String');
      if (data.hasOwnProperty('new_branch_name'))
        obj.newBranchName = ApiClient.convertToType(data['new_branch_name'], 'String');
      if (data.hasOwnProperty('versioning'))
        obj.versioning = ApiClient.convertToType(data['versioning'], 'String');
      if (data.hasOwnProperty('files'))
        obj.files = ApiClient.convertToType(data['files'], 'String');
    }
    return obj;
  }
}

/**
 * @member {String} commitSummary
 */
PutFile.prototype.commitSummary = undefined;

/**
 * @member {String} commitMessage
 */
PutFile.prototype.commitMessage = undefined;

/**
 * Allowed values for the <code>commitChoice</code> property.
 * @enum {String}
 * @readonly
 */
PutFile.CommitChoiceEnum = {
  /**
   * value: "direct"
   * @const
   */
  direct: "direct",

  /**
   * value: "commit-to-new-branch"
   * @const
   */
  commitToNewBranch: "commit-to-new-branch"
};
/**
 * @member {module:model/PutFile.CommitChoiceEnum} commitChoice
 */
PutFile.prototype.commitChoice = undefined;

/**
 * If omitted, **only new files** will be accepted.     Otherwise, the request is accepted only if **the tip of the branch is the same as `last_commit`** at the moment of processing the request.  This is done to prevent accidental conflicting changes. To get the latest commit you can use the [branches API](#operations-Branches-getBranch) 
 * @member {String} lastCommit
 */
PutFile.prototype.lastCommit = undefined;

/**
 * @member {String} newBranchName
 */
PutFile.prototype.newBranchName = undefined;

/**
 * Allowed values for the <code>versioning</code> property.
 * @enum {String}
 * @readonly
 */
PutFile.VersioningEnum = {
  /**
   * value: "auto"
   * @const
   */
  auto: "auto",

  /**
   * value: "dvc"
   * @const
   */
  dvc: "dvc",

  /**
   * value: "git"
   * @const
   */
  git: "git",

  /**
   * value: "bucket"
   * @const
   */
  bucket: "bucket"
};
/**
 * @member {module:model/PutFile.VersioningEnum} versioning
 * @default 'auto'
 */
PutFile.prototype.versioning = 'auto';

/**
 * This property can be sent multiple times to upload multiple files.
 * @member {String} files
 */
PutFile.prototype.files = undefined;

