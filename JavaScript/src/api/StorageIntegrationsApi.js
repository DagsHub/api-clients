/*
 * DagsHub API
 * This API provides a way to retrive & interact with data about DagsHub repositories, users, issues, webhooks and more. The API is also used by the [DagsHub Direct Data Access streaming client](https://github.com/DagsHub/client) to stream content from a repository for easier and faster training. 
 *
 * OpenAPI spec version: 1.0.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Files1} from '../model/Files1';
import {Integration} from '../model/Integration';

/**
* StorageIntegrations service.
* @module api/StorageIntegrationsApi
* @version 1.0.2
*/
export class StorageIntegrationsApi {

    /**
    * Constructs a new StorageIntegrationsApi. 
    * @alias module:api/StorageIntegrationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getBucketContent operation.
     * @callback moduleapi/StorageIntegrationsApi~getBucketContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Files1{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List contents in the path
     * @param {String} owner owner of the repository
     * @param {String} repo name of the repository
     * @param {module:model/String} protocol protocol of the storage integration
     * @param {String} bucket name and prefix of the bucket integration
     * @param {String} path path of a folder in the repository
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeSize  (default to <.>)
     * @param {Number} opts.limit Maximum amount of items to return (default to <.>)
     * @param {String} opts.fromToken Token, from which to continue iteration
     * @param {module:api/StorageIntegrationsApi~getBucketContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBucketContent(owner, repo, protocol, bucket, path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getBucketContent");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getBucketContent");
      }
      // verify the required parameter 'protocol' is set
      if (protocol === undefined || protocol === null) {
        throw new Error("Missing the required parameter 'protocol' when calling getBucketContent");
      }
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling getBucketContent");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getBucketContent");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'protocol': protocol,'bucket': bucket,'path': path
      };
      let queryParams = {
        'include_size': opts['includeSize'],'limit': opts['limit'],'from_token': opts['fromToken']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Files1;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/storage/content/{protocol}/{bucket}/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBucketFile operation.
     * @callback moduleapi/StorageIntegrationsApi~getBucketFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get file in the bucket
     * @param {String} owner owner of the repository
     * @param {String} repo name of the repository
     * @param {module:model/String} protocol protocol of the storage integration
     * @param {String} bucket name and prefix of the bucket integration
     * @param {String} path The content path
     * @param {module:api/StorageIntegrationsApi~getBucketFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBucketFile(owner, repo, protocol, bucket, path, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getBucketFile");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getBucketFile");
      }
      // verify the required parameter 'protocol' is set
      if (protocol === undefined || protocol === null) {
        throw new Error("Missing the required parameter 'protocol' when calling getBucketFile");
      }
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling getBucketFile");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getBucketFile");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'protocol': protocol,'bucket': bucket,'path': path
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/storage/raw/{protocol}/{bucket}/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBuckets operation.
     * @callback moduleapi/StorageIntegrationsApi~getBucketsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Integration{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List integrated storages in the repository
     * @param {String} owner owner of the repository
     * @param {String} repo name of the repository
     * @param {module:api/StorageIntegrationsApi~getBucketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBuckets(owner, repo, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getBuckets");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getBuckets");
      }

      let pathParams = {
        'owner': owner,'repo': repo
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Integration;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/storage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}