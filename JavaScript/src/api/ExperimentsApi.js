/*
 * DagsHub API
 * This API provides a way to retrive & interact with data about DagsHub repositories, users, issues, webhooks and more. The API is also used by the [DagsHub Direct Data Access streaming client](https://github.com/DagsHub/client) to stream content from a repository for easier and faster training. 
 *
 * OpenAPI spec version: 1.0.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {EditExperimentPost} from '../model/EditExperimentPost';
import {ExperimentKeys} from '../model/ExperimentKeys';

/**
* Experiments service.
* @module api/ExperimentsApi
* @version 1.0.2
*/
export class ExperimentsApi {

    /**
    * Constructs a new ExperimentsApi. 
    * @alias module:api/ExperimentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addExperimentLabel operation.
     * @callback moduleapi/ExperimentsApi~addExperimentLabelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add label to experiment
     * @param {String} owner owner of the repository
     * @param {String} repo name of the repository
     * @param {String} experimentKey a valid experiment key
     * @param {String} experimentLabel A label for the experiment, max 128 characters.
     * @param {module:api/ExperimentsApi~addExperimentLabelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addExperimentLabel(owner, repo, experimentKey, experimentLabel, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling addExperimentLabel");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling addExperimentLabel");
      }
      // verify the required parameter 'experimentKey' is set
      if (experimentKey === undefined || experimentKey === null) {
        throw new Error("Missing the required parameter 'experimentKey' when calling addExperimentLabel");
      }
      // verify the required parameter 'experimentLabel' is set
      if (experimentLabel === undefined || experimentLabel === null) {
        throw new Error("Missing the required parameter 'experimentLabel' when calling addExperimentLabel");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'experimentKey': experimentKey,'experimentLabel': experimentLabel
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/experiments/experiment/{experimentKey}/labels/{experimentLabel}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteExperiment operation.
     * @callback moduleapi/ExperimentsApi~deleteExperimentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete experiment
     * Support both git and MLflow experiments
     * @param {String} owner owner of the repository
     * @param {String} repo name of the repository
     * @param {String} experimentKey a valid experiment key
     * @param {module:api/ExperimentsApi~deleteExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteExperiment(owner, repo, experimentKey, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteExperiment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling deleteExperiment");
      }
      // verify the required parameter 'experimentKey' is set
      if (experimentKey === undefined || experimentKey === null) {
        throw new Error("Missing the required parameter 'experimentKey' when calling deleteExperiment");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'experimentKey': experimentKey
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/experiments/experiment/{experimentKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteExperimentLabel operation.
     * @callback moduleapi/ExperimentsApi~deleteExperimentLabelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete experiment label
     * @param {String} owner owner of the repository
     * @param {String} repo name of the repository
     * @param {String} experimentKey a valid experiment key
     * @param {String} experimentLabel A label for the experiment, max 128 characters.
     * @param {module:api/ExperimentsApi~deleteExperimentLabelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteExperimentLabel(owner, repo, experimentKey, experimentLabel, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteExperimentLabel");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling deleteExperimentLabel");
      }
      // verify the required parameter 'experimentKey' is set
      if (experimentKey === undefined || experimentKey === null) {
        throw new Error("Missing the required parameter 'experimentKey' when calling deleteExperimentLabel");
      }
      // verify the required parameter 'experimentLabel' is set
      if (experimentLabel === undefined || experimentLabel === null) {
        throw new Error("Missing the required parameter 'experimentLabel' when calling deleteExperimentLabel");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'experimentKey': experimentKey,'experimentLabel': experimentLabel
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/experiments/experiment/{experimentKey}/labels/{experimentLabel}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the editExperiment operation.
     * @callback moduleapi/ExperimentsApi~editExperimentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit experiment info
     * Edit experiment info, currently supports just changing experiment name.
     * @param {String} owner owner of the repository
     * @param {String} repo name of the repository
     * @param {String} experimentKey a valid experiment key
     * @param {Object} opts Optional parameters
     * @param {module:model/EditExperimentPost} opts.body 
     * @param {module:api/ExperimentsApi~editExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editExperiment(owner, repo, experimentKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling editExperiment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling editExperiment");
      }
      // verify the required parameter 'experimentKey' is set
      if (experimentKey === undefined || experimentKey === null) {
        throw new Error("Missing the required parameter 'experimentKey' when calling editExperiment");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'experimentKey': experimentKey
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/experiments/experiment/{experimentKey}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getExperimentMetrics operation.
     * @callback moduleapi/ExperimentsApi~getExperimentMetricsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get experiment metrics for experiment
     * @param {String} owner owner of the repository
     * @param {String} repo name of the repository
     * @param {Object} opts Optional parameters
     * @param {module:model/ExperimentKeys} opts.body 
     * @param {module:api/ExperimentsApi~getExperimentMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getExperimentMetrics(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getExperimentMetrics");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getExperimentMetrics");
      }

      let pathParams = {
        'owner': owner,'repo': repo
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/experiments/metricsForExperiments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getExperiments operation.
     * @callback moduleapi/ExperimentsApi~getExperimentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Experiments
     * Get a list of experiments in the given repository
     * @param {String} owner owner of the repository
     * @param {String} repo name of the repository
     * @param {module:api/ExperimentsApi~getExperimentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getExperiments(owner, repo, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getExperiments");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getExperiments");
      }

      let pathParams = {
        'owner': owner,'repo': repo
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/experiments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}