/*
 * DagsHub API
 * This API provides a way to retrive & interact with data about DagsHub repositories, users, issues, webhooks and more. The API is also used by the [DagsHub Direct Data Access streaming client](https://github.com/DagsHub/client) to stream content from a repository for easier and faster training. 
 *
 * OpenAPI spec version: 1.0.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DagsHubApi);
  }
}(this, function(expect, DagsHubApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MigrateRepo', function() {
      beforeEach(function() {
        instance = new DagsHubApi.MigrateRepo();
      });

      it('should create an instance of MigrateRepo', function() {
        // TODO: update the code to test MigrateRepo
        expect(instance).to.be.a(DagsHubApi.MigrateRepo);
      });

      it('should have the property cloneAddr (base name: "clone_addr")', function() {
        // TODO: update the code to test the property cloneAddr
        expect(instance).to.have.property('cloneAddr');
        // expect(instance.cloneAddr).to.be(expectedValueLiteral);
      });

      it('should have the property authUsername (base name: "auth_username")', function() {
        // TODO: update the code to test the property authUsername
        expect(instance).to.have.property('authUsername');
        // expect(instance.authUsername).to.be(expectedValueLiteral);
      });

      it('should have the property authPassword (base name: "auth_password")', function() {
        // TODO: update the code to test the property authPassword
        expect(instance).to.have.property('authPassword');
        // expect(instance.authPassword).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "user_id")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property repoName (base name: "repo_name")', function() {
        // TODO: update the code to test the property repoName
        expect(instance).to.have.property('repoName');
        // expect(instance.repoName).to.be(expectedValueLiteral);
      });

      it('should have the property mirror (base name: "mirror")', function() {
        // TODO: update the code to test the property mirror
        expect(instance).to.have.property('mirror');
        // expect(instance.mirror).to.be(expectedValueLiteral);
      });

      it('should have the property visibility (base name: "visibility")', function() {
        // TODO: update the code to test the property visibility
        expect(instance).to.have.property('visibility');
        // expect(instance.visibility).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

    });
  });

}));
