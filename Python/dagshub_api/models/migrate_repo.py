# coding: utf-8

"""
    DagsHub API

    This API provides a way to retrive & interact with data about DagsHub repositories, users, issues, webhooks and more. The API is also used by the [DagsHub Direct Data Access streaming client](https://github.com/DagsHub/client) to stream content from a repository for easier and faster training.   # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MigrateRepo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'clone_addr': 'str',
        'auth_username': 'str',
        'auth_password': 'str',
        'user_id': 'int',
        'repo_name': 'str',
        'mirror': 'bool',
        'visibility': 'str',
        'description': 'str'
    }

    attribute_map = {
        'clone_addr': 'clone_addr',
        'auth_username': 'auth_username',
        'auth_password': 'auth_password',
        'user_id': 'user_id',
        'repo_name': 'repo_name',
        'mirror': 'mirror',
        'visibility': 'visibility',
        'description': 'description'
    }

    def __init__(self, clone_addr=None, auth_username=None, auth_password=None, user_id=None, repo_name=None, mirror=False, visibility='false', description=None):  # noqa: E501
        """MigrateRepo - a model defined in Swagger"""  # noqa: E501
        self._clone_addr = None
        self._auth_username = None
        self._auth_password = None
        self._user_id = None
        self._repo_name = None
        self._mirror = None
        self._visibility = None
        self._description = None
        self.discriminator = None
        self.clone_addr = clone_addr
        if auth_username is not None:
            self.auth_username = auth_username
        if auth_password is not None:
            self.auth_password = auth_password
        self.user_id = user_id
        if repo_name is not None:
            self.repo_name = repo_name
        if mirror is not None:
            self.mirror = mirror
        if visibility is not None:
            self.visibility = visibility
        if description is not None:
            self.description = description

    @property
    def clone_addr(self):
        """Gets the clone_addr of this MigrateRepo.  # noqa: E501

        Remote Git address (HTTP/HTTPS URL or local path)  # noqa: E501

        :return: The clone_addr of this MigrateRepo.  # noqa: E501
        :rtype: str
        """
        return self._clone_addr

    @clone_addr.setter
    def clone_addr(self, clone_addr):
        """Sets the clone_addr of this MigrateRepo.

        Remote Git address (HTTP/HTTPS URL or local path)  # noqa: E501

        :param clone_addr: The clone_addr of this MigrateRepo.  # noqa: E501
        :type: str
        """
        if clone_addr is None:
            raise ValueError("Invalid value for `clone_addr`, must not be `None`")  # noqa: E501

        self._clone_addr = clone_addr

    @property
    def auth_username(self):
        """Gets the auth_username of this MigrateRepo.  # noqa: E501

        Authorization username  # noqa: E501

        :return: The auth_username of this MigrateRepo.  # noqa: E501
        :rtype: str
        """
        return self._auth_username

    @auth_username.setter
    def auth_username(self, auth_username):
        """Sets the auth_username of this MigrateRepo.

        Authorization username  # noqa: E501

        :param auth_username: The auth_username of this MigrateRepo.  # noqa: E501
        :type: str
        """

        self._auth_username = auth_username

    @property
    def auth_password(self):
        """Gets the auth_password of this MigrateRepo.  # noqa: E501

        Authorization password  # noqa: E501

        :return: The auth_password of this MigrateRepo.  # noqa: E501
        :rtype: str
        """
        return self._auth_password

    @auth_password.setter
    def auth_password(self, auth_password):
        """Sets the auth_password of this MigrateRepo.

        Authorization password  # noqa: E501

        :param auth_password: The auth_password of this MigrateRepo.  # noqa: E501
        :type: str
        """

        self._auth_password = auth_password

    @property
    def user_id(self):
        """Gets the user_id of this MigrateRepo.  # noqa: E501

        User ID who takes ownership of this repository  # noqa: E501

        :return: The user_id of this MigrateRepo.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this MigrateRepo.

        User ID who takes ownership of this repository  # noqa: E501

        :param user_id: The user_id of this MigrateRepo.  # noqa: E501
        :type: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def repo_name(self):
        """Gets the repo_name of this MigrateRepo.  # noqa: E501

        Name of the repository  # noqa: E501

        :return: The repo_name of this MigrateRepo.  # noqa: E501
        :rtype: str
        """
        return self._repo_name

    @repo_name.setter
    def repo_name(self, repo_name):
        """Sets the repo_name of this MigrateRepo.

        Name of the repository  # noqa: E501

        :param repo_name: The repo_name of this MigrateRepo.  # noqa: E501
        :type: str
        """

        self._repo_name = repo_name

    @property
    def mirror(self):
        """Gets the mirror of this MigrateRepo.  # noqa: E501

        Repository will be a mirror (connected repository).  # noqa: E501

        :return: The mirror of this MigrateRepo.  # noqa: E501
        :rtype: bool
        """
        return self._mirror

    @mirror.setter
    def mirror(self, mirror):
        """Sets the mirror of this MigrateRepo.

        Repository will be a mirror (connected repository).  # noqa: E501

        :param mirror: The mirror of this MigrateRepo.  # noqa: E501
        :type: bool
        """

        self._mirror = mirror

    @property
    def visibility(self):
        """Gets the visibility of this MigrateRepo.  # noqa: E501

        Repository will be private or public.  # noqa: E501

        :return: The visibility of this MigrateRepo.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this MigrateRepo.

        Repository will be private or public.  # noqa: E501

        :param visibility: The visibility of this MigrateRepo.  # noqa: E501
        :type: str
        """
        allowed_values = ["private", "public"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"  # noqa: E501
                .format(visibility, allowed_values)
            )

        self._visibility = visibility

    @property
    def description(self):
        """Gets the description of this MigrateRepo.  # noqa: E501

        Description of the repository  # noqa: E501

        :return: The description of this MigrateRepo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MigrateRepo.

        Description of the repository  # noqa: E501

        :param description: The description of this MigrateRepo.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MigrateRepo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrateRepo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
