# coding: utf-8

"""
    DagsHub API

    This API provides a way to retrive & interact with data about DagsHub repositories, users, issues, webhooks and more. The API is also used by the [DagsHub Direct Data Access streaming client](https://github.com/DagsHub/client) to stream content from a repository for easier and faster training.   # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IntegrationInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'protocol': 'str',
        'list_path': 'str'
    }

    attribute_map = {
        'name': 'name',
        'protocol': 'protocol',
        'list_path': 'list_path'
    }

    def __init__(self, name=None, protocol=None, list_path=None):  # noqa: E501
        """IntegrationInner - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._protocol = None
        self._list_path = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if protocol is not None:
            self.protocol = protocol
        if list_path is not None:
            self.list_path = list_path

    @property
    def name(self):
        """Gets the name of this IntegrationInner.  # noqa: E501

        Name/path of the bucket  # noqa: E501

        :return: The name of this IntegrationInner.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IntegrationInner.

        Name/path of the bucket  # noqa: E501

        :param name: The name of this IntegrationInner.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def protocol(self):
        """Gets the protocol of this IntegrationInner.  # noqa: E501

        Protocol used by the integration  # noqa: E501

        :return: The protocol of this IntegrationInner.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this IntegrationInner.

        Protocol used by the integration  # noqa: E501

        :param protocol: The protocol of this IntegrationInner.  # noqa: E501
        :type: str
        """
        allowed_values = ["s3", "gs"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def list_path(self):
        """Gets the list_path of this IntegrationInner.  # noqa: E501

        URL to list the root of this bucket  # noqa: E501

        :return: The list_path of this IntegrationInner.  # noqa: E501
        :rtype: str
        """
        return self._list_path

    @list_path.setter
    def list_path(self, list_path):
        """Sets the list_path of this IntegrationInner.

        URL to list the root of this bucket  # noqa: E501

        :param list_path: The list_path of this IntegrationInner.  # noqa: E501
        :type: str
        """

        self._list_path = list_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntegrationInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntegrationInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
