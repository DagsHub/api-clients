/* tslint:disable */
/* eslint-disable */
/**
 * DagsHub API
 * This API provides a way to retrive & interact with data about DagsHub repositories, users, issues, webhooks and more. The API is also used by the [DagsHub Direct Data Access streaming client](https://github.com/DagsHub/client) to stream content from a repository for easier and faster training. 
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { EditExperimentPost } from '../models';
import { ExperimentKeys } from '../models';
/**
 * ExperimentsApi - axios parameter creator
 * @export
 */
export const ExperimentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add label to experiment
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {string} experimentKey a valid experiment key
         * @param {string} experimentLabel A label for the experiment, max 128 characters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExperimentLabel: async (owner: string, repo: string, experimentKey: string, experimentLabel: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling addExperimentLabel.');
            }
            // verify required parameter 'repo' is not null or undefined
            if (repo === null || repo === undefined) {
                throw new RequiredError('repo','Required parameter repo was null or undefined when calling addExperimentLabel.');
            }
            // verify required parameter 'experimentKey' is not null or undefined
            if (experimentKey === null || experimentKey === undefined) {
                throw new RequiredError('experimentKey','Required parameter experimentKey was null or undefined when calling addExperimentLabel.');
            }
            // verify required parameter 'experimentLabel' is not null or undefined
            if (experimentLabel === null || experimentLabel === undefined) {
                throw new RequiredError('experimentLabel','Required parameter experimentLabel was null or undefined when calling addExperimentLabel.');
            }
            const localVarPath = `/repos/{owner}/{repo}/experiments/experiment/{experimentKey}/labels/{experimentLabel}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)))
                .replace(`{${"experimentKey"}}`, encodeURIComponent(String(experimentKey)))
                .replace(`{${"experimentLabel"}}`, encodeURIComponent(String(experimentLabel)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("token")
                    : await configuration.apiKey;
                localVarQueryParameter["token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Support both git and MLflow experiments
         * @summary Delete experiment
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {string} experimentKey a valid experiment key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExperiment: async (owner: string, repo: string, experimentKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteExperiment.');
            }
            // verify required parameter 'repo' is not null or undefined
            if (repo === null || repo === undefined) {
                throw new RequiredError('repo','Required parameter repo was null or undefined when calling deleteExperiment.');
            }
            // verify required parameter 'experimentKey' is not null or undefined
            if (experimentKey === null || experimentKey === undefined) {
                throw new RequiredError('experimentKey','Required parameter experimentKey was null or undefined when calling deleteExperiment.');
            }
            const localVarPath = `/repos/{owner}/{repo}/experiments/experiment/{experimentKey}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)))
                .replace(`{${"experimentKey"}}`, encodeURIComponent(String(experimentKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("token")
                    : await configuration.apiKey;
                localVarQueryParameter["token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete experiment label
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {string} experimentKey a valid experiment key
         * @param {string} experimentLabel A label for the experiment, max 128 characters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExperimentLabel: async (owner: string, repo: string, experimentKey: string, experimentLabel: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteExperimentLabel.');
            }
            // verify required parameter 'repo' is not null or undefined
            if (repo === null || repo === undefined) {
                throw new RequiredError('repo','Required parameter repo was null or undefined when calling deleteExperimentLabel.');
            }
            // verify required parameter 'experimentKey' is not null or undefined
            if (experimentKey === null || experimentKey === undefined) {
                throw new RequiredError('experimentKey','Required parameter experimentKey was null or undefined when calling deleteExperimentLabel.');
            }
            // verify required parameter 'experimentLabel' is not null or undefined
            if (experimentLabel === null || experimentLabel === undefined) {
                throw new RequiredError('experimentLabel','Required parameter experimentLabel was null or undefined when calling deleteExperimentLabel.');
            }
            const localVarPath = `/repos/{owner}/{repo}/experiments/experiment/{experimentKey}/labels/{experimentLabel}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)))
                .replace(`{${"experimentKey"}}`, encodeURIComponent(String(experimentKey)))
                .replace(`{${"experimentLabel"}}`, encodeURIComponent(String(experimentLabel)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("token")
                    : await configuration.apiKey;
                localVarQueryParameter["token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit experiment info, currently supports just changing experiment name.
         * @summary Edit experiment info
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {string} experimentKey a valid experiment key
         * @param {EditExperimentPost} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editExperiment: async (owner: string, repo: string, experimentKey: string, body?: EditExperimentPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling editExperiment.');
            }
            // verify required parameter 'repo' is not null or undefined
            if (repo === null || repo === undefined) {
                throw new RequiredError('repo','Required parameter repo was null or undefined when calling editExperiment.');
            }
            // verify required parameter 'experimentKey' is not null or undefined
            if (experimentKey === null || experimentKey === undefined) {
                throw new RequiredError('experimentKey','Required parameter experimentKey was null or undefined when calling editExperiment.');
            }
            const localVarPath = `/repos/{owner}/{repo}/experiments/experiment/{experimentKey}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)))
                .replace(`{${"experimentKey"}}`, encodeURIComponent(String(experimentKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("token")
                    : await configuration.apiKey;
                localVarQueryParameter["token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get experiment metrics for experiment
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {ExperimentKeys} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperimentMetrics: async (owner: string, repo: string, body?: ExperimentKeys, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getExperimentMetrics.');
            }
            // verify required parameter 'repo' is not null or undefined
            if (repo === null || repo === undefined) {
                throw new RequiredError('repo','Required parameter repo was null or undefined when calling getExperimentMetrics.');
            }
            const localVarPath = `/repos/{owner}/{repo}/experiments/metricsForExperiments`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("token")
                    : await configuration.apiKey;
                localVarQueryParameter["token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of experiments in the given repository
         * @summary List Experiments
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperiments: async (owner: string, repo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getExperiments.');
            }
            // verify required parameter 'repo' is not null or undefined
            if (repo === null || repo === undefined) {
                throw new RequiredError('repo','Required parameter repo was null or undefined when calling getExperiments.');
            }
            const localVarPath = `/repos/{owner}/{repo}/experiments`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("token")
                    : await configuration.apiKey;
                localVarQueryParameter["token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExperimentsApi - functional programming interface
 * @export
 */
export const ExperimentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add label to experiment
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {string} experimentKey a valid experiment key
         * @param {string} experimentLabel A label for the experiment, max 128 characters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addExperimentLabel(owner: string, repo: string, experimentKey: string, experimentLabel: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ExperimentsApiAxiosParamCreator(configuration).addExperimentLabel(owner, repo, experimentKey, experimentLabel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Support both git and MLflow experiments
         * @summary Delete experiment
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {string} experimentKey a valid experiment key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExperiment(owner: string, repo: string, experimentKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ExperimentsApiAxiosParamCreator(configuration).deleteExperiment(owner, repo, experimentKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete experiment label
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {string} experimentKey a valid experiment key
         * @param {string} experimentLabel A label for the experiment, max 128 characters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExperimentLabel(owner: string, repo: string, experimentKey: string, experimentLabel: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ExperimentsApiAxiosParamCreator(configuration).deleteExperimentLabel(owner, repo, experimentKey, experimentLabel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Edit experiment info, currently supports just changing experiment name.
         * @summary Edit experiment info
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {string} experimentKey a valid experiment key
         * @param {EditExperimentPost} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editExperiment(owner: string, repo: string, experimentKey: string, body?: EditExperimentPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ExperimentsApiAxiosParamCreator(configuration).editExperiment(owner, repo, experimentKey, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get experiment metrics for experiment
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {ExperimentKeys} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExperimentMetrics(owner: string, repo: string, body?: ExperimentKeys, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ExperimentsApiAxiosParamCreator(configuration).getExperimentMetrics(owner, repo, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of experiments in the given repository
         * @summary List Experiments
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExperiments(owner: string, repo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ExperimentsApiAxiosParamCreator(configuration).getExperiments(owner, repo, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ExperimentsApi - factory interface
 * @export
 */
export const ExperimentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Add label to experiment
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {string} experimentKey a valid experiment key
         * @param {string} experimentLabel A label for the experiment, max 128 characters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addExperimentLabel(owner: string, repo: string, experimentKey: string, experimentLabel: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ExperimentsApiFp(configuration).addExperimentLabel(owner, repo, experimentKey, experimentLabel, options).then((request) => request(axios, basePath));
        },
        /**
         * Support both git and MLflow experiments
         * @summary Delete experiment
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {string} experimentKey a valid experiment key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExperiment(owner: string, repo: string, experimentKey: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ExperimentsApiFp(configuration).deleteExperiment(owner, repo, experimentKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete experiment label
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {string} experimentKey a valid experiment key
         * @param {string} experimentLabel A label for the experiment, max 128 characters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExperimentLabel(owner: string, repo: string, experimentKey: string, experimentLabel: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ExperimentsApiFp(configuration).deleteExperimentLabel(owner, repo, experimentKey, experimentLabel, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit experiment info, currently supports just changing experiment name.
         * @summary Edit experiment info
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {string} experimentKey a valid experiment key
         * @param {EditExperimentPost} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editExperiment(owner: string, repo: string, experimentKey: string, body?: EditExperimentPost, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ExperimentsApiFp(configuration).editExperiment(owner, repo, experimentKey, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get experiment metrics for experiment
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {ExperimentKeys} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExperimentMetrics(owner: string, repo: string, body?: ExperimentKeys, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ExperimentsApiFp(configuration).getExperimentMetrics(owner, repo, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of experiments in the given repository
         * @summary List Experiments
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExperiments(owner: string, repo: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ExperimentsApiFp(configuration).getExperiments(owner, repo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExperimentsApi - object-oriented interface
 * @export
 * @class ExperimentsApi
 * @extends {BaseAPI}
 */
export class ExperimentsApi extends BaseAPI {
    /**
     * 
     * @summary Add label to experiment
     * @param {string} owner owner of the repository
     * @param {string} repo name of the repository
     * @param {string} experimentKey a valid experiment key
     * @param {string} experimentLabel A label for the experiment, max 128 characters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentsApi
     */
    public async addExperimentLabel(owner: string, repo: string, experimentKey: string, experimentLabel: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ExperimentsApiFp(this.configuration).addExperimentLabel(owner, repo, experimentKey, experimentLabel, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Support both git and MLflow experiments
     * @summary Delete experiment
     * @param {string} owner owner of the repository
     * @param {string} repo name of the repository
     * @param {string} experimentKey a valid experiment key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentsApi
     */
    public async deleteExperiment(owner: string, repo: string, experimentKey: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ExperimentsApiFp(this.configuration).deleteExperiment(owner, repo, experimentKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete experiment label
     * @param {string} owner owner of the repository
     * @param {string} repo name of the repository
     * @param {string} experimentKey a valid experiment key
     * @param {string} experimentLabel A label for the experiment, max 128 characters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentsApi
     */
    public async deleteExperimentLabel(owner: string, repo: string, experimentKey: string, experimentLabel: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ExperimentsApiFp(this.configuration).deleteExperimentLabel(owner, repo, experimentKey, experimentLabel, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Edit experiment info, currently supports just changing experiment name.
     * @summary Edit experiment info
     * @param {string} owner owner of the repository
     * @param {string} repo name of the repository
     * @param {string} experimentKey a valid experiment key
     * @param {EditExperimentPost} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentsApi
     */
    public async editExperiment(owner: string, repo: string, experimentKey: string, body?: EditExperimentPost, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ExperimentsApiFp(this.configuration).editExperiment(owner, repo, experimentKey, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get experiment metrics for experiment
     * @param {string} owner owner of the repository
     * @param {string} repo name of the repository
     * @param {ExperimentKeys} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentsApi
     */
    public async getExperimentMetrics(owner: string, repo: string, body?: ExperimentKeys, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ExperimentsApiFp(this.configuration).getExperimentMetrics(owner, repo, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of experiments in the given repository
     * @summary List Experiments
     * @param {string} owner owner of the repository
     * @param {string} repo name of the repository
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentsApi
     */
    public async getExperiments(owner: string, repo: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ExperimentsApiFp(this.configuration).getExperiments(owner, repo, options).then((request) => request(this.axios, this.basePath));
    }
}
