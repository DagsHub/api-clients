/* tslint:disable */
/* eslint-disable */
/**
 * DagsHub API
 * This API provides a way to retrive & interact with data about DagsHub repositories, users, issues, webhooks and more. The API is also used by the [DagsHub Direct Data Access streaming client](https://github.com/DagsHub/client) to stream content from a repository for easier and faster training. 
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Files1 } from '../models';
import { Integration } from '../models';
/**
 * StorageIntegrationsApi - axios parameter creator
 * @export
 */
export const StorageIntegrationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List contents in the path
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {string} protocol protocol of the storage integration
         * @param {string} bucket name and prefix of the bucket integration
         * @param {string} path path of a folder in the repository
         * @param {boolean} [includeSize] 
         * @param {number} [limit] Maximum amount of items to return
         * @param {string} [fromToken] Token, from which to continue iteration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBucketContent: async (owner: string, repo: string, protocol: string, bucket: string, path: string, includeSize?: boolean, limit?: number, fromToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getBucketContent.');
            }
            // verify required parameter 'repo' is not null or undefined
            if (repo === null || repo === undefined) {
                throw new RequiredError('repo','Required parameter repo was null or undefined when calling getBucketContent.');
            }
            // verify required parameter 'protocol' is not null or undefined
            if (protocol === null || protocol === undefined) {
                throw new RequiredError('protocol','Required parameter protocol was null or undefined when calling getBucketContent.');
            }
            // verify required parameter 'bucket' is not null or undefined
            if (bucket === null || bucket === undefined) {
                throw new RequiredError('bucket','Required parameter bucket was null or undefined when calling getBucketContent.');
            }
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new RequiredError('path','Required parameter path was null or undefined when calling getBucketContent.');
            }
            const localVarPath = `/repos/{owner}/{repo}/storage/content/{protocol}/{bucket}/{path}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)))
                .replace(`{${"protocol"}}`, encodeURIComponent(String(protocol)))
                .replace(`{${"bucket"}}`, encodeURIComponent(String(bucket)))
                .replace(`{${"path"}}`, encodeURIComponent(String(path)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("token")
                    : await configuration.apiKey;
                localVarQueryParameter["token"] = localVarApiKeyValue;
            }

            if (includeSize !== undefined) {
                localVarQueryParameter['include_size'] = includeSize;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (fromToken !== undefined) {
                localVarQueryParameter['from_token'] = fromToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get file in the bucket
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {string} protocol protocol of the storage integration
         * @param {string} bucket name and prefix of the bucket integration
         * @param {string} path The content path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBucketFile: async (owner: string, repo: string, protocol: string, bucket: string, path: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getBucketFile.');
            }
            // verify required parameter 'repo' is not null or undefined
            if (repo === null || repo === undefined) {
                throw new RequiredError('repo','Required parameter repo was null or undefined when calling getBucketFile.');
            }
            // verify required parameter 'protocol' is not null or undefined
            if (protocol === null || protocol === undefined) {
                throw new RequiredError('protocol','Required parameter protocol was null or undefined when calling getBucketFile.');
            }
            // verify required parameter 'bucket' is not null or undefined
            if (bucket === null || bucket === undefined) {
                throw new RequiredError('bucket','Required parameter bucket was null or undefined when calling getBucketFile.');
            }
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new RequiredError('path','Required parameter path was null or undefined when calling getBucketFile.');
            }
            const localVarPath = `/repos/{owner}/{repo}/storage/raw/{protocol}/{bucket}/{path}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)))
                .replace(`{${"protocol"}}`, encodeURIComponent(String(protocol)))
                .replace(`{${"bucket"}}`, encodeURIComponent(String(bucket)))
                .replace(`{${"path"}}`, encodeURIComponent(String(path)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("token")
                    : await configuration.apiKey;
                localVarQueryParameter["token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List integrated storages in the repository
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuckets: async (owner: string, repo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getBuckets.');
            }
            // verify required parameter 'repo' is not null or undefined
            if (repo === null || repo === undefined) {
                throw new RequiredError('repo','Required parameter repo was null or undefined when calling getBuckets.');
            }
            const localVarPath = `/repos/{owner}/{repo}/storage`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("token")
                    : await configuration.apiKey;
                localVarQueryParameter["token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StorageIntegrationsApi - functional programming interface
 * @export
 */
export const StorageIntegrationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List contents in the path
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {string} protocol protocol of the storage integration
         * @param {string} bucket name and prefix of the bucket integration
         * @param {string} path path of a folder in the repository
         * @param {boolean} [includeSize] 
         * @param {number} [limit] Maximum amount of items to return
         * @param {string} [fromToken] Token, from which to continue iteration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBucketContent(owner: string, repo: string, protocol: string, bucket: string, path: string, includeSize?: boolean, limit?: number, fromToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Files1>>> {
            const localVarAxiosArgs = await StorageIntegrationsApiAxiosParamCreator(configuration).getBucketContent(owner, repo, protocol, bucket, path, includeSize, limit, fromToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get file in the bucket
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {string} protocol protocol of the storage integration
         * @param {string} bucket name and prefix of the bucket integration
         * @param {string} path The content path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBucketFile(owner: string, repo: string, protocol: string, bucket: string, path: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await StorageIntegrationsApiAxiosParamCreator(configuration).getBucketFile(owner, repo, protocol, bucket, path, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List integrated storages in the repository
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBuckets(owner: string, repo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Integration>>> {
            const localVarAxiosArgs = await StorageIntegrationsApiAxiosParamCreator(configuration).getBuckets(owner, repo, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StorageIntegrationsApi - factory interface
 * @export
 */
export const StorageIntegrationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary List contents in the path
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {string} protocol protocol of the storage integration
         * @param {string} bucket name and prefix of the bucket integration
         * @param {string} path path of a folder in the repository
         * @param {boolean} [includeSize] 
         * @param {number} [limit] Maximum amount of items to return
         * @param {string} [fromToken] Token, from which to continue iteration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBucketContent(owner: string, repo: string, protocol: string, bucket: string, path: string, includeSize?: boolean, limit?: number, fromToken?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Files1>> {
            return StorageIntegrationsApiFp(configuration).getBucketContent(owner, repo, protocol, bucket, path, includeSize, limit, fromToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get file in the bucket
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {string} protocol protocol of the storage integration
         * @param {string} bucket name and prefix of the bucket integration
         * @param {string} path The content path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBucketFile(owner: string, repo: string, protocol: string, bucket: string, path: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return StorageIntegrationsApiFp(configuration).getBucketFile(owner, repo, protocol, bucket, path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List integrated storages in the repository
         * @param {string} owner owner of the repository
         * @param {string} repo name of the repository
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBuckets(owner: string, repo: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Integration>> {
            return StorageIntegrationsApiFp(configuration).getBuckets(owner, repo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StorageIntegrationsApi - object-oriented interface
 * @export
 * @class StorageIntegrationsApi
 * @extends {BaseAPI}
 */
export class StorageIntegrationsApi extends BaseAPI {
    /**
     * 
     * @summary List contents in the path
     * @param {string} owner owner of the repository
     * @param {string} repo name of the repository
     * @param {string} protocol protocol of the storage integration
     * @param {string} bucket name and prefix of the bucket integration
     * @param {string} path path of a folder in the repository
     * @param {boolean} [includeSize] 
     * @param {number} [limit] Maximum amount of items to return
     * @param {string} [fromToken] Token, from which to continue iteration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageIntegrationsApi
     */
    public async getBucketContent(owner: string, repo: string, protocol: string, bucket: string, path: string, includeSize?: boolean, limit?: number, fromToken?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Files1>> {
        return StorageIntegrationsApiFp(this.configuration).getBucketContent(owner, repo, protocol, bucket, path, includeSize, limit, fromToken, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get file in the bucket
     * @param {string} owner owner of the repository
     * @param {string} repo name of the repository
     * @param {string} protocol protocol of the storage integration
     * @param {string} bucket name and prefix of the bucket integration
     * @param {string} path The content path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageIntegrationsApi
     */
    public async getBucketFile(owner: string, repo: string, protocol: string, bucket: string, path: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return StorageIntegrationsApiFp(this.configuration).getBucketFile(owner, repo, protocol, bucket, path, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary List integrated storages in the repository
     * @param {string} owner owner of the repository
     * @param {string} repo name of the repository
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageIntegrationsApi
     */
    public async getBuckets(owner: string, repo: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Integration>> {
        return StorageIntegrationsApiFp(this.configuration).getBuckets(owner, repo, options).then((request) => request(this.axios, this.basePath));
    }
}
