/*
 * DagsHub API
 * This API provides a way to retrive & interact with data about DagsHub repositories, users, issues, webhooks and more. The API is also used by the [DagsHub Direct Data Access streaming client](https://github.com/DagsHub/client) to stream content from a repository for easier and faster training. 
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Files1;
import io.swagger.client.model.Integration;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StorageIntegrationsApi {
    private ApiClient apiClient;

    public StorageIntegrationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StorageIntegrationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getBucketContent
     * @param owner owner of the repository (required)
     * @param repo name of the repository (required)
     * @param protocol protocol of the storage integration (required)
     * @param bucket name and prefix of the bucket integration (required)
     * @param path path of a folder in the repository (required)
     * @param includeSize  (optional, default to false)
     * @param limit Maximum amount of items to return (optional, default to 100)
     * @param fromToken Token, from which to continue iteration (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBucketContentCall(String owner, String repo, String protocol, String bucket, String path, Boolean includeSize, Integer limit, String fromToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/storage/content/{protocol}/{bucket}/{path}"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()))
            .replaceAll("\\{" + "protocol" + "\\}", apiClient.escapeString(protocol.toString()))
            .replaceAll("\\{" + "bucket" + "\\}", apiClient.escapeString(bucket.toString()))
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_size", includeSize));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (fromToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from_token", fromToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "tokenAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBucketContentValidateBeforeCall(String owner, String repo, String protocol, String bucket, String path, Boolean includeSize, Integer limit, String fromToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getBucketContent(Async)");
        }
        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling getBucketContent(Async)");
        }
        // verify the required parameter 'protocol' is set
        if (protocol == null) {
            throw new ApiException("Missing the required parameter 'protocol' when calling getBucketContent(Async)");
        }
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling getBucketContent(Async)");
        }
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getBucketContent(Async)");
        }
        
        com.squareup.okhttp.Call call = getBucketContentCall(owner, repo, protocol, bucket, path, includeSize, limit, fromToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List contents in the path
     * 
     * @param owner owner of the repository (required)
     * @param repo name of the repository (required)
     * @param protocol protocol of the storage integration (required)
     * @param bucket name and prefix of the bucket integration (required)
     * @param path path of a folder in the repository (required)
     * @param includeSize  (optional, default to false)
     * @param limit Maximum amount of items to return (optional, default to 100)
     * @param fromToken Token, from which to continue iteration (optional)
     * @return Files1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Files1 getBucketContent(String owner, String repo, String protocol, String bucket, String path, Boolean includeSize, Integer limit, String fromToken) throws ApiException {
        ApiResponse<Files1> resp = getBucketContentWithHttpInfo(owner, repo, protocol, bucket, path, includeSize, limit, fromToken);
        return resp.getData();
    }

    /**
     * List contents in the path
     * 
     * @param owner owner of the repository (required)
     * @param repo name of the repository (required)
     * @param protocol protocol of the storage integration (required)
     * @param bucket name and prefix of the bucket integration (required)
     * @param path path of a folder in the repository (required)
     * @param includeSize  (optional, default to false)
     * @param limit Maximum amount of items to return (optional, default to 100)
     * @param fromToken Token, from which to continue iteration (optional)
     * @return ApiResponse&lt;Files1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Files1> getBucketContentWithHttpInfo(String owner, String repo, String protocol, String bucket, String path, Boolean includeSize, Integer limit, String fromToken) throws ApiException {
        com.squareup.okhttp.Call call = getBucketContentValidateBeforeCall(owner, repo, protocol, bucket, path, includeSize, limit, fromToken, null, null);
        Type localVarReturnType = new TypeToken<Files1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List contents in the path (asynchronously)
     * 
     * @param owner owner of the repository (required)
     * @param repo name of the repository (required)
     * @param protocol protocol of the storage integration (required)
     * @param bucket name and prefix of the bucket integration (required)
     * @param path path of a folder in the repository (required)
     * @param includeSize  (optional, default to false)
     * @param limit Maximum amount of items to return (optional, default to 100)
     * @param fromToken Token, from which to continue iteration (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBucketContentAsync(String owner, String repo, String protocol, String bucket, String path, Boolean includeSize, Integer limit, String fromToken, final ApiCallback<Files1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBucketContentValidateBeforeCall(owner, repo, protocol, bucket, path, includeSize, limit, fromToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Files1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBucketFile
     * @param owner owner of the repository (required)
     * @param repo name of the repository (required)
     * @param protocol protocol of the storage integration (required)
     * @param bucket name and prefix of the bucket integration (required)
     * @param path The content path (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBucketFileCall(String owner, String repo, String protocol, String bucket, String path, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/storage/raw/{protocol}/{bucket}/{path}"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()))
            .replaceAll("\\{" + "protocol" + "\\}", apiClient.escapeString(protocol.toString()))
            .replaceAll("\\{" + "bucket" + "\\}", apiClient.escapeString(bucket.toString()))
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "tokenAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBucketFileValidateBeforeCall(String owner, String repo, String protocol, String bucket, String path, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getBucketFile(Async)");
        }
        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling getBucketFile(Async)");
        }
        // verify the required parameter 'protocol' is set
        if (protocol == null) {
            throw new ApiException("Missing the required parameter 'protocol' when calling getBucketFile(Async)");
        }
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling getBucketFile(Async)");
        }
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getBucketFile(Async)");
        }
        
        com.squareup.okhttp.Call call = getBucketFileCall(owner, repo, protocol, bucket, path, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get file in the bucket
     * 
     * @param owner owner of the repository (required)
     * @param repo name of the repository (required)
     * @param protocol protocol of the storage integration (required)
     * @param bucket name and prefix of the bucket integration (required)
     * @param path The content path (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getBucketFile(String owner, String repo, String protocol, String bucket, String path) throws ApiException {
        getBucketFileWithHttpInfo(owner, repo, protocol, bucket, path);
    }

    /**
     * Get file in the bucket
     * 
     * @param owner owner of the repository (required)
     * @param repo name of the repository (required)
     * @param protocol protocol of the storage integration (required)
     * @param bucket name and prefix of the bucket integration (required)
     * @param path The content path (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getBucketFileWithHttpInfo(String owner, String repo, String protocol, String bucket, String path) throws ApiException {
        com.squareup.okhttp.Call call = getBucketFileValidateBeforeCall(owner, repo, protocol, bucket, path, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get file in the bucket (asynchronously)
     * 
     * @param owner owner of the repository (required)
     * @param repo name of the repository (required)
     * @param protocol protocol of the storage integration (required)
     * @param bucket name and prefix of the bucket integration (required)
     * @param path The content path (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBucketFileAsync(String owner, String repo, String protocol, String bucket, String path, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBucketFileValidateBeforeCall(owner, repo, protocol, bucket, path, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getBuckets
     * @param owner owner of the repository (required)
     * @param repo name of the repository (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBucketsCall(String owner, String repo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/storage"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "tokenAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBucketsValidateBeforeCall(String owner, String repo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getBuckets(Async)");
        }
        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling getBuckets(Async)");
        }
        
        com.squareup.okhttp.Call call = getBucketsCall(owner, repo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List integrated storages in the repository
     * 
     * @param owner owner of the repository (required)
     * @param repo name of the repository (required)
     * @return Integration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integration getBuckets(String owner, String repo) throws ApiException {
        ApiResponse<Integration> resp = getBucketsWithHttpInfo(owner, repo);
        return resp.getData();
    }

    /**
     * List integrated storages in the repository
     * 
     * @param owner owner of the repository (required)
     * @param repo name of the repository (required)
     * @return ApiResponse&lt;Integration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integration> getBucketsWithHttpInfo(String owner, String repo) throws ApiException {
        com.squareup.okhttp.Call call = getBucketsValidateBeforeCall(owner, repo, null, null);
        Type localVarReturnType = new TypeToken<Integration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List integrated storages in the repository (asynchronously)
     * 
     * @param owner owner of the repository (required)
     * @param repo name of the repository (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBucketsAsync(String owner, String repo, final ApiCallback<Integration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBucketsValidateBeforeCall(owner, repo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
