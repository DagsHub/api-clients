/**
 * DagsHub API
 * This API provides a way to retrive & interact with data about DagsHub repositories, users, issues, webhooks and more. The API is also used by the [DagsHub Direct Data Access streaming client](https://github.com/DagsHub/client) to stream content from a repository for easier and faster training. 
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.Files_1
import io.swagger.client.model.Integration
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class StorageIntegrationsApi(
  val defBasePath: String = "https://dagshub.com/api/v1",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new StorageIntegrationsApiAsyncHelper(client, config)

  /**
   * List contents in the path
   * 
   *
   * @param owner owner of the repository 
   * @param repo name of the repository 
   * @param protocol protocol of the storage integration 
   * @param bucket name and prefix of the bucket integration 
   * @param &#x60;path&#x60; path of a folder in the repository 
   * @param includeSize  (optional, default to false)
   * @param limit Maximum amount of items to return (optional, default to 100)
   * @param fromToken Token, from which to continue iteration (optional)
   * @return Files_1
   */
  def getBucketContent(owner: String, repo: String, protocol: String, bucket: String, &#x60;path&#x60;: String, includeSize: Option[Boolean] = Option(false), limit: Option[Integer] = Option(100), fromToken: Option[String] = None): Option[Files_1] = {
    val await = Try(Await.result(getBucketContentAsync(owner, repo, protocol, bucket, &#x60;path&#x60;, includeSize, limit, fromToken), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List contents in the path asynchronously
   * 
   *
   * @param owner owner of the repository 
   * @param repo name of the repository 
   * @param protocol protocol of the storage integration 
   * @param bucket name and prefix of the bucket integration 
   * @param &#x60;path&#x60; path of a folder in the repository 
   * @param includeSize  (optional, default to false)
   * @param limit Maximum amount of items to return (optional, default to 100)
   * @param fromToken Token, from which to continue iteration (optional)
   * @return Future(Files_1)
   */
  def getBucketContentAsync(owner: String, repo: String, protocol: String, bucket: String, &#x60;path&#x60;: String, includeSize: Option[Boolean] = Option(false), limit: Option[Integer] = Option(100), fromToken: Option[String] = None): Future[Files_1] = {
      helper.getBucketContent(owner, repo, protocol, bucket, &#x60;path&#x60;, includeSize, limit, fromToken)
  }

  /**
   * Get file in the bucket
   * 
   *
   * @param owner owner of the repository 
   * @param repo name of the repository 
   * @param protocol protocol of the storage integration 
   * @param bucket name and prefix of the bucket integration 
   * @param &#x60;path&#x60; The content path 
   * @return void
   */
  def getBucketFile(owner: String, repo: String, protocol: String, bucket: String, &#x60;path&#x60;: String) = {
    val await = Try(Await.result(getBucketFileAsync(owner, repo, protocol, bucket, &#x60;path&#x60;), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get file in the bucket asynchronously
   * 
   *
   * @param owner owner of the repository 
   * @param repo name of the repository 
   * @param protocol protocol of the storage integration 
   * @param bucket name and prefix of the bucket integration 
   * @param &#x60;path&#x60; The content path 
   * @return Future(void)
   */
  def getBucketFileAsync(owner: String, repo: String, protocol: String, bucket: String, &#x60;path&#x60;: String) = {
      helper.getBucketFile(owner, repo, protocol, bucket, &#x60;path&#x60;)
  }

  /**
   * List integrated storages in the repository
   * 
   *
   * @param owner owner of the repository 
   * @param repo name of the repository 
   * @return Integration
   */
  def getBuckets(owner: String, repo: String): Option[Integration] = {
    val await = Try(Await.result(getBucketsAsync(owner, repo), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List integrated storages in the repository asynchronously
   * 
   *
   * @param owner owner of the repository 
   * @param repo name of the repository 
   * @return Future(Integration)
   */
  def getBucketsAsync(owner: String, repo: String): Future[Integration] = {
      helper.getBuckets(owner, repo)
  }

}

class StorageIntegrationsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def getBucketContent(owner: String,
    repo: String,
    protocol: String,
    bucket: String,
    &#x60;path&#x60;: String,
    includeSize: Option[Boolean] = Option(false),
    limit: Option[Integer] = Option(100),
    fromToken: Option[String] = None
    )(implicit reader: ClientResponseReader[Files_1]): Future[Files_1] = {
    // create path and map variables
    val path = (addFmt("/repos/{owner}/{repo}/storage/content/{protocol}/{bucket}/{path}")
      replaceAll("\\{" + "owner" + "\\}", owner.toString)
      replaceAll("\\{" + "repo" + "\\}", repo.toString)
      replaceAll("\\{" + "protocol" + "\\}", protocol.toString)
      replaceAll("\\{" + "bucket" + "\\}", bucket.toString)
      replaceAll("\\{" + "path" + "\\}", &#x60;path&#x60;.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (owner == null) throw new Exception("Missing required parameter 'owner' when calling StorageIntegrationsApi->getBucketContent")

    if (repo == null) throw new Exception("Missing required parameter 'repo' when calling StorageIntegrationsApi->getBucketContent")

    if (protocol == null) throw new Exception("Missing required parameter 'protocol' when calling StorageIntegrationsApi->getBucketContent")

    if (bucket == null) throw new Exception("Missing required parameter 'bucket' when calling StorageIntegrationsApi->getBucketContent")

    if (&#x60;path&#x60; == null) throw new Exception("Missing required parameter '&#x60;path&#x60;' when calling StorageIntegrationsApi->getBucketContent")

    includeSize match {
      case Some(param) => queryParams += "include_size" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    fromToken match {
      case Some(param) => queryParams += "from_token" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getBucketFile(owner: String,
    repo: String,
    protocol: String,
    bucket: String,
    &#x60;path&#x60;: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/repos/{owner}/{repo}/storage/raw/{protocol}/{bucket}/{path}")
      replaceAll("\\{" + "owner" + "\\}", owner.toString)
      replaceAll("\\{" + "repo" + "\\}", repo.toString)
      replaceAll("\\{" + "protocol" + "\\}", protocol.toString)
      replaceAll("\\{" + "bucket" + "\\}", bucket.toString)
      replaceAll("\\{" + "path" + "\\}", &#x60;path&#x60;.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (owner == null) throw new Exception("Missing required parameter 'owner' when calling StorageIntegrationsApi->getBucketFile")

    if (repo == null) throw new Exception("Missing required parameter 'repo' when calling StorageIntegrationsApi->getBucketFile")

    if (protocol == null) throw new Exception("Missing required parameter 'protocol' when calling StorageIntegrationsApi->getBucketFile")

    if (bucket == null) throw new Exception("Missing required parameter 'bucket' when calling StorageIntegrationsApi->getBucketFile")

    if (&#x60;path&#x60; == null) throw new Exception("Missing required parameter '&#x60;path&#x60;' when calling StorageIntegrationsApi->getBucketFile")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getBuckets(owner: String,
    repo: String)(implicit reader: ClientResponseReader[Integration]): Future[Integration] = {
    // create path and map variables
    val path = (addFmt("/repos/{owner}/{repo}/storage")
      replaceAll("\\{" + "owner" + "\\}", owner.toString)
      replaceAll("\\{" + "repo" + "\\}", repo.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (owner == null) throw new Exception("Missing required parameter 'owner' when calling StorageIntegrationsApi->getBuckets")

    if (repo == null) throw new Exception("Missing required parameter 'repo' when calling StorageIntegrationsApi->getBuckets")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
